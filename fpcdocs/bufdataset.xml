<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="fcl">
    <!--
    ====================================================================
        bufdataset
    ====================================================================
    -->
    <module name="bufdataset">
      <short>
        Implements a database-aware buffered dataset
      </short>
      <descr>
        <p>
          Implements a database-aware buffered dataset.
        </p>
        <p>
          Original Authors: Joost van der Sluis and members of the Free Pascal development team.
        </p>
      </descr>

      <!-- unresolved external references -->
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="db"/>
      <element name="bufdataset_parser"/>

      <element name="TResolverErrorEvent">
        <short>
          Defines the event handler for update errors in TBufDataset
        </short>
        <descr>
          <p>
            <var>TResolverErrorEvent</var> is an object procedure which defines an event handler signalled when an error occurs while updating a record in <var>TBufDataset</var>. TResolverErrorEvent is the type used for the TCustomBufDataset.OnUpdateError property. Applications should create a routine which uses the signature for the type to handle the event notification. The routine should update the Response argument to indicate the action taken for the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.OnUpdateError">TCustomBufDataset.OnUpdateError</link>
          <link id="TBufDataset.OnUpdateError">TBufDataset.OnUpdateError</link>
        </seealso>
      </element>
      <element name="TResolverErrorEvent.Sender">
        <short>Class generating the event notification</short>
      </element>
      <element name="TResolverErrorEvent.DataSet">
        <short>Dataset for the event notification</short>
      </element>
      <element name="TResolverErrorEvent.E">
        <short>Exception for the event notification</short>
      </element>
      <element name="TResolverErrorEvent.UpdateKind">
        <short>Type of update where the error occurred</short>
      </element>
      <element name="TResolverErrorEvent.Response">
        <short>Response from the event handler</short>
      </element>

      <element name="PBlobBuffer">
        <short>
          Pointer to the TBlobBuffer type
        </short>
        <descr>
          <p>
            <var>PBlobBuffer</var> is a pointer to the <var>TBlobBuffer</var> type. PBlobBuffer is used to allocate and access the buffers for Blob fields (Memo or Graphic field types). PBlobBuffer is used in TBufBlobField, TBufBlobStream, and in TBufDataset methods which perform record buffer management.
          </p>
        </descr>
        <seealso>
          <link id="TBufBlobField">TBufBlobField</link>
          <link id="TBufBlobStream">TBufBlobStream</link>
          <link id="TCustomBufDataset">TCustomBufDataset</link>
          <link id="TBufDataset">TBufDataset</link>
        </seealso>
      </element>

      <element name="TBlobBuffer">
        <short>
          Represents a buffer allocated for a Blob field
        </short>
        <descr>
          <p>
            <var>TBlobBuffer</var> is a record type used to represent a buffer allocated for a Blob field. Pointers to TBlobBuffer (PBlobBuffer) are used in the implementation of  TBufBlobStream and TBufDataset.
          </p>
        </descr>
        <seealso>
          <link id="TBufBlobStream">TBufBlobStream</link>
          <link id="TBlobField">TBlobField</link>
          <link id="TCustomBufDataset">TCustomBufDataset</link>
          <link id="TBufDataset">TBufDataset</link>
        </seealso>
      </element>
      <element name="TBlobBuffer.FieldNo">
        <short>Ordinal position of the field for the Block buffer</short>
      </element>
      <element name="TBlobBuffer.OrgBufID">
        <short>Identifies the original blob buffer for an update buffer</short>
      </element>
      <element name="TBlobBuffer.Buffer">
        <short>Pointer to memory allocated for the Blob buffer</short>
      </element>
      <element name="TBlobBuffer.Size">
        <short>Size of the memory allocated for the Blob buffer</short>
      </element>

      <element name="PBufBlobField">
        <short>Pointer to a TBufBlobField type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TBufBlobField">
        <short>Implements a Blob field for TBufDataset</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufBlobField.ConnBlobBuffer">
        <short>Array of database-specific byte values</short>
      </element>
      <element name="TBufBlobField.BlobBuffer">
        <short></short>
      </element>

      <element name="TBufBlobStream">
        <short>
          Implements a Blob Stream for TBufDataset
        </short>
        <descr>
          <p>
            <var>TBufBlobStream</var> is a <var>TStream</var> descendant which implements a Blob Stream for TBufDataset. TBufBlobStream has members which represent the Dataset and Field for the Blob, its Buffer, and modification flags. TBufBlobStream provides overridden methods used to perform Read, Write, and Seek operations using the buffer allocated for a Blob field.
          </p>
          <p>
            TBufBlobStream instances are created in the TBufDataset.CreateBlobStream method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.CreateBlobStream">
            TCustomBufDataset.CreateBlobStream
          </link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TBufBlobStream.FField"/>
      <element name="TBufBlobStream.FDataSet"/>
      <element name="TBufBlobStream.FBlobBuffer"/>
      <element name="TBufBlobStream.FPosition"/>
      <element name="TBufBlobStream.FModified"/>

      <!-- visibility: protected -->
      <element name="TBufBlobStream.Seek">
        <short>Moves the stream to the specified relative position</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufBlobStream.Seek.Result">
        <short>New position in the stream following the operation</short>
      </element>
      <element name="TBufBlobStream.Seek.Offset">
        <short>Relative offset to locate in the stream</short>
      </element>
      <element name="TBufBlobStream.Seek.Origin">
        <short>Origin for the relative offset value</short>
      </element>

      <element name="TBufBlobStream.Read">
        <short>
          Reads the specified number of bytes from the stream into the given buffer
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufBlobStream.Read.Result">
        <short>Actual number of bytes red in the method</short>
      </element>
      <element name="TBufBlobStream.Read.Buffer">
        <short>Buffer used to store values read from the stream</short>
      </element>
      <element name="TBufBlobStream.Read.Count">
        <short>Number of bytes to include in the read operation</short>
      </element>

      <element name="TBufBlobStream.Write">
        <short>
          Writes values from the the specified buffer to the stream
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufBlobStream.Write.Result">
        <short>Actual number of bytes written in the method</short>
      </element>
      <element name="TBufBlobStream.Write.Buffer">
        <short>Values written to the stream</short>
      </element>
      <element name="TBufBlobStream.Write.Count">
        <short>Number of bytes in the buffer to write to the stream</short>
      </element>

      <!-- visibility: public -->
      <element name="TBufBlobStream.Create">
        <short>Constructor for the class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufBlobStream.Create.Field">
        <short>Field with metadata for the Blob field</short>
      </element>
      <element name="TBufBlobStream.Create.Mode">
        <short>Operations allowed using the stream</short>
      </element>

      <element name="TBufBlobStream.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          Destroy is the destructor for the class instance.
        </descr>
        <seealso></seealso>
      </element>

      <element name="PBufRecLinkItem">
        <short>Pointer to a TBufRecLinkItem type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TBufRecLinkItem">
        <short>Stores bookmarks to the previous and next records in a linked list</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufRecLinkItem.prior">
        <short>Bookmark to the previous record</short>
      </element>
      <element name="TBufRecLinkItem.next">
        <short>Bookmark to the next record</short>
      </element>

      <element name="PBufBookmark">
        <short>Pointer to the TBufBookmark type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TBufBookmark">
        <short>Implements a Bookmark for TBufDataset</short>
        <descr>
          TBufBookmark is a record type used to implement a Bookmark for TBufDataset.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TBufBookmark.BookMarkData">
        <short>Pointer to bookmark data in a record buffer </short>
      </element>
      <element name="TBufBookmark.BookmarkInt">
        <short>Index for the record buffer in an array index</short>
      </element>
      <element name="TBufBookmark.BookmarkFlag">
        <short>Bookmark flag value for a record buffer</short>
      </element>

      <element name="TRecUpdateBuffer">
        <short>Implements a buffer used for record updates in TBufDataset</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TRecUpdateBuffer.UpdateKind">
        <short>Update kind for the record update buffer</short>
      </element>
      <element name="TRecUpdateBuffer.BookMarkData">
        <short>Bookmark data for the record update buffer</short>
        <descr>
          <p>
            Bookmark value for the record update buffer.
          </p>
          <ul>
            <li>
              <var>-1</var> if the update was cancelled. For example: a newly appended record has been deleted.
            </li>
            <li>
              If UpdateKind is <var>ukInsert</var>, it contains a bookmark to the newly created record.
            </li>
            <li>
              If UpdateKind is <var>ukModify</var>, it contains a bookmark to the record with the new data.
            </li>
            <li>
              If UpdateKind is <var>ukDelete</var>, it contains a bookmark to the deleted record (i.e. the record is still there).
            </li>
          </ul>
        </descr>
      </element>

      <element name="TRecUpdateBuffer.NextBookMarkData">
        <short>
          Bookmark for the record following a deleted record
        </short>
        <descr>
          <p>
            Bookmark information for the record immediately after the record. If UpdateKind is <var>ukDelete</var>, it contains a bookmark to the record just after the deleted record.
          </p>
        </descr>
      </element>

      <element name="TRecUpdateBuffer.OldValuesBuffer">
        <short>Buffer for pre-editing values for the record</short>
        <descr>
          <ul>
            <li>
              If UpdateKind is <var>ukModify</var>, it contains a record buffer which contains the old data.
            </li>
            <li>
              If UpdateKind is <var>ukDelete</var>, it contains a record buffer with the data of the deleted record.
            </li>
          </ul>
        </descr>
      </element>

      <element name="TRecordsUpdateBuffer">
        <short>Array of update buffers for record updates</short>
        <descr>
          <p>
            <var>TRecordsUpdateBuffer</var> is an array of <var>TRecUpdateBuffer</var> type used to implement an array of update buffers for records in TBufDataset.
          </p>
        </descr>
        <seealso>
          <link id="TRecUpdateBuffer">TRecUpdateBuffer</link>
          <link id="TCustomBufDataset">TCustomBufDataset</link>
        </seealso>
      </element>

      <element name="TCompareFunc">
        <short>
          Function used to compare values to determine their relative sort order
        </short>
        <descr>
          <p>
            <var>TCompareFunc</var> is an <var>Int64</var> function type used to compare pointers using the specified locate option values. TCompareFunc is used in the implementation of the TDBCompareRec type.
          </p>
        </descr>
        <seealso>
          <link id="TDBCompareStruct">TDBCompareRec</link>
        </seealso>
      </element>
      <element name="TCompareFunc.Result">
        <short>Relative order for the compared pointer values</short>
      </element>
      <element name="TCompareFunc.subValue">
        <short>Pointer to a compared value</short>
      </element>
      <element name="TCompareFunc.aValue">
        <short>Pointer to a compared value</short>
      </element>
      <element name="TCompareFunc.size">
        <short>Number of bytes included in the comparison</short>
      </element>
      <element name="TCompareFunc.options">
        <short>Locate options to use in the routine</short>
      </element>

      <element name="TDBCompareRec">
        <short>
          Implements a structure used to compare buffers for fields in TBufDataset.
        </short>
        <descr>
          <p>
            <var>TDBCompareRec</var> is a record type which implements a structure used to compare buffers for fields in TBufDataset. TDBCompareRec is used in the implementation of the TDBCompareStruct type.
          </p>
        </descr>
        <seealso>
          <link id="TCompareFunc">TCompareFunc</link>
          <link id="TLocateOptions">TLocateOptions</link>
        </seealso>
      </element>
      <element name="TDBCompareRec.CompareFunc">
        <short>
          Function used to determine the relative sort order for compared field values
        </short>
      </element>
      <element name="TDBCompareRec.Off">
        <short>Offset to data in the record buffer</short>
      </element>
      <element name="TDBCompareRec.NullBOff">
        <short>Offset to the Null Bitmap in record data</short>
      </element>
      <element name="TDBCompareRec.FieldInd">
        <short>Ordinal position for the field</short>
      </element>
      <element name="TDBCompareRec.Size">
        <short>Size of the compared values</short>
      </element>
      <element name="TDBCompareRec.Options">
        <short>Locate options used in the comparison</short>
      </element>
      <element name="TDBCompareRec.Desc">
        <short>Indicates if the field is ordered in descending order</short>
      </element>

      <element name="TDBCompareStruct">
        <short>
          Implements a structure used to compare values for a group of fields in TBufDataset
        </short>
        <descr>
          TDBCompareStruct is an array of TDBCompareRec type used to implement a structure to compare values for a group of fields in TBufDataset. TDBCompareStruct is used in the implementation of TBufIndex and its descendent classes.
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TDBCompareRec">TDBCompareRec</link>
          <link id="TCustomBufDataset">TCustomBufDataset</link>
        </seealso>
      </element>

      <element name="TBufIndex">
        <short>
          Defines the interface used to implement indexes in TBufDataset
        </short>
        <descr>
          <p>
            <var>TBufIndex</var> is a <var>TObject</var> descendant which defines the interface used to implement indexes in TBufDataset. TBufIndex provides access to the Dataset with field values for the index, and methods to perform record navigation and index maintenance.
          </p>
          <p>
            TBufIndex contains many virtual and abstract methods that should be implemented in a descendent class which provides a specific index implementation, such as: TDoubleLinkedBufIndex, TUniDirectionalBufIndex, and TArrayBufIndex.
          </p>
          <p>
            TBufIndex is the type used for the TBufDataset.BufferIndex property.
          </p>
        </descr>
        <seealso>
          <link id="TBufDataset.BufferIndex">TBufDataset.BufferIndex</link>
          <link id="TDoubleLinkedBufIndex">TDoubleLinkedBufIndex</link>
          <link id="TUniDirectionalBufIndex">TUniDirectionalBufIndex</link>
          <link id="TArrayBufIndex">TArrayBufIndex</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TBufIndex.FDataSet"/>

      <!-- visibility: protected -->
      <element name="TBufIndex.GetBookmarkSize" link="TBufIndex.BookmarkSize">
        <short>Gets the value for the BookmarkSize property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetBookmarkSize.Result">
        <short>Value for the BookmarkSize property</short>
      </element>

      <element name="TBufIndex.GetCurrentBuffer" link="TBufIndex.CurrentBuffer">
        <short>Gets the value for the CurrentBuffer property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetCurrentBuffer.Result">
        <short>Value for the CurrentBuffer property</short>
      </element>

      <element name="TBufIndex.GetCurrentRecord" link="TBufIndex.CurrentRecord">
        <short>Gets the value for the CurrentRecord property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetCurrentRecord.Result">
        <short>Value for the CurrentRecord property</short>
      </element>

      <element name="TBufIndex.GetIsInitialized" link="TBufIndex.IsInitialized">
        <short>Gets the value for the IsInitialized property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetIsInitialized.Result">
        <short>Value for the IsInitialized property</short>
      </element>

      <element name="TBufIndex.GetSpareBuffer" link="TBufIndex.SpareBuffer">
        <short>Gets the value for the SpareBuffer property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetSpareBuffer.Result">
        <short>Value for the SpareBuffer property</short>
      </element>

      <element name="TBufIndex.GetSpareRecord" link="TBufIndex.SpareRecord">
        <short>Gets the value for the SpareRecord property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetSpareRecord.Result">
        <short>Value for the SpareRecord property</short>
      </element>

      <element name="TBufIndex.GetRecNo" link="TBufIndex.RecNo">
        <short>Gets the value for the RecNo property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.GetRecNo.Result">
        <short>Value for the RecNo property</short>
      </element>

      <element name="TBufIndex.SetRecNo" link="TBufIndex.RecNo">
        <short>Sets the value for the RecNo property</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.SetRecNo.ARecNo">
        <short>New value for the RecNo property</short>
      </element>

      <!-- visibility: public -->
      <element name="TBufIndex.DBCompareStruct">
        <short>Structure used when comparing record/field values in the index</short>
        <descr>
          <p>
            <var>DBCompareStruct</var> is an array of <var>TDBCompareRec</var> type used when comparing record/field values in the index.
          </p>
        </descr>
      </element>

      <element name="TBufIndex.Name">
        <short>Name of the index</short>
        <descr>
          <p>
            <var>Name</var> is a public <var>String</var> member that provides a name or identifier for the index.
          </p>
        </descr>
      </element>
      <element name="TBufIndex.FieldsName">
        <short>Field names included in the index</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.CaseinsFields">
        <short>Case-insensitive field names in the index</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.DescFields">
        <short>Descending fields in the index</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.Options">
        <short>Options for the index</short>
        <descr></descr>
      </element>
      <element name="TBufIndex.IndNr">
        <short>Ordinal position for the index in the list of indexes</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance. Create calls the inherited constructor, and stores the ADataset parameter to the internal member used for the TCustomBufDataset class instance.
          </p>
        </descr>
      </element>
      <element name="TBufIndex.Create.ADataset">
        <short>Dataset for the index</short>
      </element>

      <element name="TBufIndex.ScrollBackward">
        <short>
          Moves to the prior record in the index
        </short>
        <descr>
          <p>
            <var>ScrollBackward</var> is a TGetResult function used to scrolling to the previous record in the index order. ScrollBackward implements the behavior needed to support the <var>TDataset.MoveBy</var> method using the index order for the dataset.
          </p>
          <p>
            ScrollBackward is an abstract virtual method method, and must be implemented in a descendent class. The return value is a TGetResult enumeration value that indicates the result for the scroll request.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TGetResult">TGetResult</link>
          <link id="#fcl.Db.TDataset.MoveBy">TDataset.MoveBy</link>
        </seealso>
      </element>
      <element name="TBufIndex.ScrollBackward.Result">
        <short>Result for the scroll request</short>
      </element>

      <element name="TBufIndex.ScrollForward">
        <short>Moves to the next record in the index</short>
      </element>
      <element name="TBufIndex.ScrollForward.Result">
        <short></short>
      </element>

      <element name="TBufIndex.ScrollFirst">
        <short>Moves to the first record in the index</short>
      </element>
      <element name="TBufIndex.ScrollFirst.Result">
        <short>TGetResult value for the method</short>
      </element>

      <element name="TBufIndex.ScrollLast">
        <short>Moves to the last record in the index</short>
      </element>

      <element name="TBufIndex.GetCurrent">
        <short>
          Gets the record buffer for the current record in the dataset
        </short>
      </element>
      <element name="TBufIndex.GetCurrent.Result">
        <short>TGetResult for the method</short>
      </element>

      <element name="TBufIndex.GetRecord">
        <short>
          Gets prior/next record relative to the specified bookmark
        </short>
        <descr>
          <p>
            <var>GetRecord</var> is used to get the prior/next record relative to the specified bookmark.  GetRecord is a virtual method that should be overridden in a descendent class; the implementation in TBufIndex simply returns the value <var>grError</var> as the return value for the method.
          </p>
          <p>
            Please note that GetRecord should <b>not</b> change the current record in the dataset on exit.
          </p>
        </descr>
      </element>
      <element name="TBufIndex.GetRecord.Result">
        <short>TGetResult value for the method</short>
      </element>
      <element name="TBufIndex.GetRecord.ABookmark">
        <short>Pointer to the bookmark for the record</short>
      </element>
      <element name="TBufIndex.GetRecord.GetMode">
        <short>Relative position for the requested record</short>
      </element>

      <element name="TBufIndex.SetToFirstRecord">
        <short>
          Sets the index to the first record in the index order
        </short>
      </element>

      <element name="TBufIndex.SetToLastRecord">
        <short>
          Sets the index to the last record in the index order
        </short>
      </element>

      <element name="TBufIndex.StoreCurrentRecord">
        <short>Stores the record buffer for the current record</short>
      </element>

      <element name="TBufIndex.RestoreCurrentRecord">
        <short>Restores the stored record buiffer to the current record</short>
      </element>

      <element name="TBufIndex.CanScrollForward">
        <short>Indicates if the index can be scrolled forward</short>
      </element>
      <element name="TBufIndex.CanScrollForward.Result">
        <short>True when another record is available in  the index order</short>
      </element>

      <element name="TBufIndex.DoScrollForward">
        <short>Implements actions need to scroll forward in the index</short>
      </element>

      <element name="TBufIndex.StoreCurrentRecIntoBookmark">
        <short></short>
      </element>
      <element name="TBufIndex.StoreCurrentRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TBufIndex.StoreSpareRecIntoBookmark">
        <short></short>
      </element>
      <element name="TBufIndex.StoreSpareRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TBufIndex.GotoBookmark">
        <short>Moves the index position to the specified Bookmark</short>
      </element>
      <element name="TBufIndex.GotoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TBufIndex.BookmarkValid">
        <short>Indicates the specified Bookmark is valid</short>
      </element>
      <element name="TBufIndex.BookmarkValid.Result">
        <short></short>
      </element>
      <element name="TBufIndex.BookmarkValid.ABookmark">
        <short></short>
      </element>

      <element name="TBufIndex.CompareBookmarks">
        <short>Gets the relative order for the specified Bookmarks</short>
      </element>
      <element name="TBufIndex.CompareBookmarks.Result">
        <short></short>
      </element>
      <element name="TBufIndex.CompareBookmarks.ABookmark1">
        <short></short>
      </element>
      <element name="TBufIndex.CompareBookmarks.ABookmark2">
        <short></short>
      </element>

      <element name="TBufIndex.SameBookmarks">
        <short>Indicates if the specified Bookmarks are for the same record</short>
      </element>
      <element name="TBufIndex.SameBookmarks.Result">
        <short></short>
      </element>
      <element name="TBufIndex.SameBookmarks.ABookmark1">
        <short></short>
      </element>
      <element name="TBufIndex.SameBookmarks.ABookmark2">
        <short></short>
      </element>

      <element name="TBufIndex.InitialiseIndex">
        <short>Initializes the index</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TBufIndex.InitialiseSpareRecord">
        <short>Initializes values in the spare record for the index</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TBufIndex.InitialiseSpareRecord.ASpareRecord">
        <short></short>
      </element>

      <element name="TBufIndex.ReleaseSpareRecord">
        <short>Releases resources allocated to the spare record for the index</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TBufIndex.AddRecord">
        <short>
          Adds a record to the index
        </short>
        <descr>
          Adds a record to the end of the index as the new last record (spare record). AddRecord is used in the GetNextPacket method.
        </descr>
      </element>

      <element name="TBufIndex.InsertRecordBeforeCurrentRecord">
        <short>
          Inserts a record before the current record in the index order
        </short>
        <descr>
          <p>
            Inserts a record before the current record using the sort order for the active index.
          </p>
        </descr>
      </element>
      <element name="TBufIndex.InsertRecordBeforeCurrentRecord.ARecord">
        <short>Record buffer to insert into the index</short>
      </element>

      <element name="TBufIndex.RemoveRecordFromIndex">
        <short>
          Remove the record at the specified bookmark from the index
        </short>
      </element>
      <element name="TBufIndex.RemoveRecordFromIndex.ABookmark">
        <short>Bookmark for the record to remove from the index</short>
      </element>

      <element name="TBufIndex.OrderCurrentRecord">
        <short></short>
        <descr></descr>
      </element>

      <element name="TBufIndex.BeginUpdate">
        <short></short>
        <descr></descr>
      </element>

      <element name="TBufIndex.EndUpdate">
        <short></short>
        <descr></descr>
      </element>

      <element name="TBufIndex.SpareRecord">
        <short>Spare record for the index</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.SpareBuffer">
        <short>Spare record buffer for the index</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.CurrentRecord">
        <short>Current record in the index</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.CurrentBuffer">
        <short>Current record buffer in the index</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.IsInitialized">
        <short>Indicates if the index has been initialized</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.BookmarkSize">
        <short>Size (number of bytes) needed for Bookmarks in the index</short>
        <descr></descr>
      </element>

      <element name="TBufIndex.RecNo">
        <short>Active record number in the index</short>
        <descr></descr>
      </element>

      <element name="TDoubleLinkedBufIndex" link="TBufIndex">
        <short>
          Implements an index using a doubly-linked list
        </short>
        <descr>
          <p>
            <var>TDoubleLinkedBufIndex</var> is a <var>TBufIndex</var> descendant that implements an index using a doubly-linked list. Nodes in the doubly-linked list are implemented using the TBufRecLinkItem record type and the PBufRecLinkItem pointer type. TDoubleLinkedBufIndex provides two sentinel nodes that represent the first and last items in the linked list.
          </p>
          <p>
            TDoubleLinkedBufIndex is the type used to implement the default index (<var>'DEFAULT_ORDER'</var>) in TBufDataset.
          </p>
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TBufRecLinkItem">TBufRecLinkItem</link>
          <link id="PBufRecLinkItem">PBufRecLinkItem</link>
          <link id="TBufDataset">TBufDataset</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TDoubleLinkedBufIndex.FCursOnFirstRec"/>
      <element name="TDoubleLinkedBufIndex.FStoredRecBuf"/>
      <element name="TDoubleLinkedBufIndex.FCurrentRecBuf"/>

      <!-- visibility: protected -->
      <element name="TDoubleLinkedBufIndex.GetBookmarkSize">
        <short>Gets the value for the BookmarkSize property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetBookmarkSize.Result">
        <short>Value for the BookmarkSize property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetCurrentBuffer">
        <short>Gets the value for the CurrentBuffer property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetCurrentBuffer.Result">
        <short>Value for the CurrentBuffer property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetCurrentRecord">
        <short>Gets the value for the CurrentRecord property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetCurrentRecord.Result">
        <short>Value for the CurrentRecord property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetIsInitialized">
        <short>Gets the value for the IsInitialized property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetIsInitialized.Result">
        <short>Value for the IsInitialized property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetSpareBuffer">
        <short>Gets the value for the SpareBuffer property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetSpareBuffer.Result">
        <short>Value for the SpareBuffer property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetSpareRecord">
        <short>Gets the value for the SpareRecord property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetSpareRecord.Result">
        <short>Value for the SpareRecord property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetRecNo">
        <short>Gets the value for the RecNo property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetRecNo.Result">
        <short>Value for the RecNo property</short>
      </element>

      <element name="TDoubleLinkedBufIndex.SetRecNo">
        <short>Sets the value for the RecNo property</short>
      </element>
      <element name="TDoubleLinkedBufIndex.SetRecNo.ARecNo">
        <short>New value for the RecNo property</short>
      </element>

      <!-- visibility: public -->
      <element name="TDoubleLinkedBufIndex.FLastRecBuf"/>
      <element name="TDoubleLinkedBufIndex.FFirstRecBuf"/>
      <element name="TDoubleLinkedBufIndex.FNeedScroll"/>

      <element name="TDoubleLinkedBufIndex.ScrollBackward">
        <short>Scrolls the index toward the beginning of the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.ScrollBackward.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.ScrollForward">
        <short>Scrolls the index towards the end of the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.ScrollForward.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetCurrent">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetCurrent.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.ScrollFirst">
        <short>Scrolls to the first entry in the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.ScrollFirst.Result">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.ScrollFirst.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.ScrollLast">
        <short>Scrolls to the last entry in the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.ScrollLast.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.GetRecord">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetRecord.Result">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetRecord.ABookmark">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.GetRecord.GetMode">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.SetToFirstRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.SetToLastRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.StoreCurrentRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.RestoreCurrentRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.CanScrollForward">
        <short>Indicates if the index can be scrolled towards the end of the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.CanScrollForward.Result">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.DoScrollForward">
        <short>Implements actions needed to scroll forward using the index</short>
      </element>

      <element name="TDoubleLinkedBufIndex.StoreCurrentRecIntoBookmark">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.StoreCurrentRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.StoreSpareRecIntoBookmark">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.StoreSpareRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.GotoBookmark">
        <short>Navigates the index to the specified Bookmark</short>
      </element>
      <element name="TDoubleLinkedBufIndex.GotoBookmark.ABookmark">
        <short>Bookmark to make active in the index</short>
      </element>

      <element name="TDoubleLinkedBufIndex.CompareBookmarks">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.CompareBookmarks.Result">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.CompareBookmarks.ABookmark1">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.CompareBookmarks.ABookmark2">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.SameBookmarks">
        <short>Compares Bookmark values for ordering in the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.SameBookmarks.Result">
        <short></short>
      </element>
      <element name="TDoubleLinkedBufIndex.SameBookmarks.ABookmark1">
        <short>First Bookmark for the comparison</short>
      </element>
      <element name="TDoubleLinkedBufIndex.SameBookmarks.ABookmark2">
        <short>Second Bookmark for the comparison</short>
      </element>

      <element name="TDoubleLinkedBufIndex.InitialiseIndex">
        <short>Initializes the index</short>
      </element>

      <element name="TDoubleLinkedBufIndex.InitialiseSpareRecord">
        <short>Initializes the spare record in the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.InitialiseSpareRecord.ASpareRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.ReleaseSpareRecord">
        <short>Releases the spare record in the index</short>
      </element>

      <element name="TDoubleLinkedBufIndex.BeginUpdate">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.AddRecord">
        <short>Adds a record to the index</short>
      </element>

      <element name="TDoubleLinkedBufIndex.InsertRecordBeforeCurrentRecord">
        <short>Inserts a record prior to the current record in the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.InsertRecordBeforeCurrentRecord.ARecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.RemoveRecordFromIndex">
        <short>Removes the record at the specified Bookmark from the index</short>
      </element>
      <element name="TDoubleLinkedBufIndex.RemoveRecordFromIndex.ABookmark">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.OrderCurrentRecord">
        <short></short>
      </element>

      <element name="TDoubleLinkedBufIndex.EndUpdate">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex" link="TBufIndex">
        <short>Implements a uni-directional index</short>
        <descr>
          <p>
            <var>TUniDirectionalBufIndex</var> is a <var>TBufIndex</var> descendant that implements a uni-directional index. TUniDirectionalBufIndex does not require bookmarks used for navigation; it is uni-directional and the next record is always available in the buffers allocated for the index.
          </p>
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TUniDirectionalBufIndex.FSpareBuffer"/>

      <!-- visibility: protected -->
      <element name="TUniDirectionalBufIndex.GetBookmarkSize">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetBookmarkSize.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetCurrentBuffer">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetCurrentBuffer.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetCurrentRecord">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetCurrentRecord.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetIsInitialized">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetIsInitialized.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetSpareBuffer">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetSpareBuffer.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetSpareRecord">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetSpareRecord.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetRecNo">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetRecNo.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.SetRecNo">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.SetRecNo.ARecNo">
        <short></short>
      </element>

      <!-- visibility: public -->
      <element name="TUniDirectionalBufIndex.ScrollBackward">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.ScrollBackward.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.ScrollForward">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.ScrollForward.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GetCurrent">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GetCurrent.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.ScrollFirst">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.ScrollFirst.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.ScrollLast">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.SetToFirstRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.SetToLastRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.StoreCurrentRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.RestoreCurrentRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.CanScrollForward">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.CanScrollForward.Result">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.DoScrollForward">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.StoreCurrentRecIntoBookmark">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.StoreCurrentRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.StoreSpareRecIntoBookmark">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.StoreSpareRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.GotoBookmark">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.GotoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.InitialiseIndex">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.InitialiseSpareRecord">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.InitialiseSpareRecord.ASpareRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.ReleaseSpareRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.BeginUpdate">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.AddRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.InsertRecordBeforeCurrentRecord">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.InsertRecordBeforeCurrentRecord.ARecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.RemoveRecordFromIndex">
        <short></short>
      </element>
      <element name="TUniDirectionalBufIndex.RemoveRecordFromIndex.ABookmark">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.OrderCurrentRecord">
        <short></short>
      </element>

      <element name="TUniDirectionalBufIndex.EndUpdate">
        <short></short>
      </element>

      <element name="TArrayBufIndex" link="TBufIndex">
        <short>Implements an index using an array of record buffers</short>
        <descr>
          <p>
            <var>TArrayBufIndex</var> is a <var>TBufIndex</var> descendant that implements an index using an array of record buffers. TArrayBufIndex uses an internal member with an array of pointers to the TRecordBuffer data type used for record buffers in the index. TArrayBufIndex provides support for Bookmarks in the dataset using TBufBookmark.
          </p>
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TRecordBuffer">TRecordBuffer</link>
          <link id="TBufBookmark">TBufBookmark</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TArrayBufIndex.FStoredRecBuf"/>
      <element name="TArrayBufIndex.FInitialBuffers"/>
      <element name="TArrayBufIndex.FGrowBuffer"/>

      <element name="TArrayBufIndex.GetRecordFromBookmark">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetRecordFromBookmark.Result">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetRecordFromBookmark.ABookmark">
        <short></short>
      </element>

      <!-- visibility: protected -->
      <element name="TArrayBufIndex.GetBookmarkSize">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetBookmarkSize.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetCurrentBuffer">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetCurrentBuffer.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetCurrentRecord">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetCurrentRecord.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetIsInitialized">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetIsInitialized.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetSpareBuffer">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetSpareBuffer.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetSpareRecord">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetSpareRecord.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetRecNo">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetRecNo.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.SetRecNo">
        <short></short>
      </element>
      <element name="TArrayBufIndex.SetRecNo.ARecNo">
        <short></short>
      </element>

      <!-- visibility: public -->
      <element name="TArrayBufIndex.FRecordArray"/>
      <element name="TArrayBufIndex.FCurrentRecInd"/>
      <element name="TArrayBufIndex.FLastRecInd"/>
      <element name="TArrayBufIndex.FNeedScroll"/>

      <element name="TArrayBufIndex.Create">
        <short></short>
      </element>
      <element name="TArrayBufIndex.Create.ADataset">
        <short></short>
      </element>

      <element name="TArrayBufIndex.ScrollBackward">
        <short></short>
      </element>
      <element name="TArrayBufIndex.ScrollBackward.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.ScrollForward">
        <short></short>
      </element>
      <element name="TArrayBufIndex.ScrollForward.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GetCurrent">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GetCurrent.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.ScrollFirst">
        <short></short>
      </element>
      <element name="TArrayBufIndex.ScrollFirst.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.ScrollLast">
        <short></short>
      </element>

      <element name="TArrayBufIndex.SetToFirstRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.SetToLastRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.StoreCurrentRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.RestoreCurrentRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.CanScrollForward">
        <short></short>
      </element>
      <element name="TArrayBufIndex.CanScrollForward.Result">
        <short></short>
      </element>

      <element name="TArrayBufIndex.DoScrollForward">
        <short></short>
      </element>

      <element name="TArrayBufIndex.StoreCurrentRecIntoBookmark">
        <short></short>
      </element>
      <element name="TArrayBufIndex.StoreCurrentRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TArrayBufIndex.StoreSpareRecIntoBookmark">
        <short></short>
      </element>
      <element name="TArrayBufIndex.StoreSpareRecIntoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TArrayBufIndex.GotoBookmark">
        <short></short>
      </element>
      <element name="TArrayBufIndex.GotoBookmark.ABookmark">
        <short></short>
      </element>

      <element name="TArrayBufIndex.InitialiseIndex">
        <short></short>
      </element>

      <element name="TArrayBufIndex.InitialiseSpareRecord">
        <short></short>
      </element>
      <element name="TArrayBufIndex.InitialiseSpareRecord.ASpareRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.ReleaseSpareRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.BeginUpdate">
        <short></short>
      </element>

      <element name="TArrayBufIndex.AddRecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.InsertRecordBeforeCurrentRecord">
        <short></short>
      </element>
      <element name="TArrayBufIndex.InsertRecordBeforeCurrentRecord.ARecord">
        <short></short>
      </element>

      <element name="TArrayBufIndex.RemoveRecordFromIndex">
        <short></short>
      </element>
      <element name="TArrayBufIndex.RemoveRecordFromIndex.ABookmark">
        <short></short>
      </element>

      <element name="TArrayBufIndex.EndUpdate">
        <short></short>
      </element>

      <element name="TRowStateValue">
        <short>
          Row state values for records in TBufDataset
        </short>
        <descr>
          <p>
            <var>TRowStateValue</var> is an enumeration type with values that indicate the state for field values in the row. Values in the enumeration indicate how fields in an update buffer differ from the fields in the original record data. Values from TRowStateValue are stored in the TRowState type, and used in data packet readers for TBufDataset (TDataPacketReader).
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TRowStateValue.rsvOriginal">
        <short>Buffer contains the original value(s)</short>
      </element>
      <element name="TRowStateValue.rsvDeleted">
        <short>Buffer is for a record that will be deleted</short>
      </element>
      <element name="TRowStateValue.rsvInserted">
        <short>Buffer is for a record that will be inserted</short>
      </element>
      <element name="TRowStateValue.rsvUpdated">
        <short>Buffer is for a record that will be updated</short>
      </element>
      <element name="TRowStateValue.rsvDetailUpdates">
        <short>Buffer is for updates to a detail (child) dataset</short>
      </element>

      <element name="TRowState">
        <short>
          Stores values from the TRowStateValue enumeration
        </short>
        <descr>
          <p>
            <var>TRowState</var> is a set type used to store values from the <var>TRowStateValue</var> enumeration. TRowState is used to indicate the state for records loaded and saved using the data packet handler in TBufDataset.
          </p>
        </descr>
        <seealso>
          <link id ="TDatapacketReader">TDatapacketReader</link>
          <link id ="TFpcBinaryDatapacketReader">TFpcBinaryDatapacketReader</link>
        </seealso>
      </element>

      <element name="TDataPacketFormat">
        <short>Indicates the format used for data packets in TBufDataset</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDataPacketFormat.dfBinary">
        <short>Data packets are in binary format</short>
      </element>
      <element name="TDataPacketFormat.dfXML">
        <short>Data packets are in XML format</short>
      </element>
      <element name="TDataPacketFormat.dfXMLUTF8">
        <short>Data packets are in UTF-8-encoded XML format</short>
      </element>
      <element name="TDataPacketFormat.dfAny">
        <short>
          Data packets can be in any supported format (detected by the packet reader)
        </short>
      </element>

      <element name="TDatapacketReaderClass">
        <short>Class type used to create data packet readers for TBufDataset</short>
      </element>

      <element name="TDataPacketReader">
        <short>
          Implements a data packet reader for TBufDataset
        </short>
        <descr>
          <p>
            <var>TDataPacketReader</var> is a <var>TObject</var> descendant which implements a data packet reader for TBufDataset. TDataPacketReader is a concept borrowed from TClientDatset in Delphi. Data packets are used to access the values in its dataset. Data packets can contain field definitions or record data. Data packets can store their values in binary format or as an XML document.
          </p>
          <p>
            TDataPacketReader provides properties and methods that allow access to the field definitions, field values, and row states for record buffers in its dataset. Methods are provided to load and save field definitions or record data using a stream. Methods are provided to recognize the storage format for the data packets in the stream.
          </p>
          <p>
            Many of the methods in TDataPacketReader are declared as virtual or abstract. They are implemented in descendent classes that use a specific data packet format, such as TFpcBinaryDatapacketReader or TXMLDatapacketReader (in <var>xmldatapacketreader.pp</var>).
          </p>
        </descr>
        <seealso>
          <link id="TFpcBinaryDatapacketReader">
            TFpcBinaryDatapacketReader
          </link>
          <link id="#fcl.XmlDatapacketReader.TXMLDatapacketReader">
            TXMLDatapacketReader
          </link>
        </seealso>
      </element>

      <!-- visibility: default -->
      <element name="TDataPacketReader.FDataSet"/>
      <element name="TDataPacketReader.FStream"/>

      <!-- visibility: protected -->
      <element name="TDataPacketReader.RowStateToByte">
        <short></short>
      </element>
      <element name="TDataPacketReader.RowStateToByte.Result">
        <short></short>
      </element>
      <element name="TDataPacketReader.RowStateToByte.ARowState">
        <short></short>
      </element>

      <element name="TDataPacketReader.ByteToRowState">
        <short></short>
      </element>
      <element name="TDataPacketReader.ByteToRowState.Result">
        <short></short>
      </element>
      <element name="TDataPacketReader.ByteToRowState.AByte">
        <short></short>
      </element>

      <element name="TDataPacketReader.RestoreBlobField">
        <short></short>
      </element>
      <element name="TDataPacketReader.RestoreBlobField.AField">
        <short></short>
      </element>
      <element name="TDataPacketReader.RestoreBlobField.ASource">
        <short></short>
      </element>
      <element name="TDataPacketReader.RestoreBlobField.ASize">
        <short></short>
      </element>

      <element name="TDataPacketReader.DataSet">
        <short>Dataset for values handled in the data packet reader</short>
      </element>

      <element name="TDataPacketReader.Stream">
        <short></short>
      </element>

      <!-- visibility: public -->
      <element name="TDataPacketReader.Create">
        <short>Constructor for the class instance</short>
      </element>
      <element name="TDataPacketReader.Create.aDataset">
        <short>aDataset associated with the data packet reader</short>
      </element>
      <element name="TDataPacketReader.Create.AStream">
        <short>Stream used to read values handled in the data packet reader</short>
      </element>

      <element name="TDataPacketReader.LoadFieldDefs">
        <short>Loads the field definitions for the dataset from a stream</short>
      </element>
      <element name="TDataPacketReader.LoadFieldDefs.AnAutoIncValue">
        <short></short>
      </element>

      <element name="TDataPacketReader.InitLoadRecords">
        <short>Called before the records are loaded</short>
      </element>

      <element name="TDataPacketReader.GetCurrentRecord">
        <short>
          Returns True if there is at least one more record available in the stream
        </short>
      </element>
      <element name="TDataPacketReader.GetCurrentRecord.Result">
        <short></short>
      </element>

      <element name="TDataPacketReader.GetRecordRowState">
        <short>
          Returns the RowState of the current record, and the order of the update
        </short>
      </element>
      <element name="TDataPacketReader.GetRecordRowState.Result">
        <short></short>
      </element>
      <element name="TDataPacketReader.GetRecordRowState.AUpdOrder">
        <short></short>
      </element>

      <element name="TDataPacketReader.RestoreRecord">
        <short>Restores a record from the stream into the current record buffer</short>
      </element>

      <element name="TDataPacketReader.GotoNextRecord">
        <short>Moves to the next record in the stream</short>
      </element>

      <element name="TDataPacketReader.StoreFieldDefs">
        <short>Saves field definitions to a stream</short>
      </element>
      <element name="TDataPacketReader.StoreFieldDefs.AnAutoIncValue">
        <short></short>
      </element>

      <element name="TDataPacketReader.StoreRecord">
        <short>Saves the current record buffer to the stream</short>
      </element>
      <element name="TDataPacketReader.StoreRecord.ARowState">
        <short></short>
      </element>
      <element name="TDataPacketReader.StoreRecord.AUpdOrder">
        <short></short>
      </element>

      <element name="TDataPacketReader.FinalizeStoreRecords">
        <short>Called after all records are stored</short>
      </element>

      <element name="TDataPacketReader.RecognizeStream">
        <short>Checks if the provided stream is of the right format for this class</short>
      </element>
      <element name="TDataPacketReader.RecognizeStream.Result">
        <short></short>
      </element>
      <element name="TDataPacketReader.RecognizeStream.AStream">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader">
        <short>
          Implements a data packet reader using binary data packets
        </short>
        <descr>
          <p>
            <var>TFpcBinaryDatapacketReader</var> is a <var>TDatapacketReader</var> descendant that implements a data packet reader using binary data packets. Binary data packets use the following layout:
          </p>
          <table>
            <tr>
              <td><b>Section</b></td>
              <td><b>Name</b></td>
              <td><b>Length</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td><b>Header</b></td>
              <td>Identification</td>
              <td>13 bytes</td>
              <td>Contains the value <var>'BinBufDataSet'</var></td>
            </tr>
            <tr>
              <td></td>
              <td>Version</td>
              <td>1 byte</td>
              <td>Version number</td>
            </tr>
            <tr>
              <td></td>
              <td>Field Definition Count</td>
              <td>2 bytes</td>
              <td>Column Layout for field definition values</td>
            </tr>
            <tr>
              <td><b>Field Definitions</b></td>
              <td>Field Name Length</td>
              <td>2 bytes</td>
              <td>Section occurs the number of times indicated in Field Definition Count</td>
            </tr>
            <tr>
              <td></td>
              <td>Field Name</td>
              <td>See above</td>
              <td>Name of the field in the dataset</td>
            </tr>
            <tr>
              <td></td>
              <td>Display Name Length</td>
              <td>2 bytes</td>
              <td></td>
            </tr>
            <tr>
              <td></td>
              <td>Display Name</td>
              <td>See above</td>
              <td>Caption for the field</td>
            </tr>
            <tr>
              <td></td>
              <td>Data Type</td>
              <td>2 bytes</td>
              <td></td>
            </tr>
            <tr>
              <td></td>
              <td>Read-Only Attribute</td>
              <td>1 byte</td>
              <td><var>0</var>=read/write, <var>1</var>=read-only</td>
            </tr>
            <tr>
              <td><b>Parameters</b></td>
              <td>AutoInc Value</td>
              <td>4 bytes</td>
              <td>Integer value for the auto-increment field type</td>
            </tr>
            <tr>
              <td><b>Row Header</b></td>
              <td>Row Marker</td>
              <td>1 byte</td>
              <td>Contains the value <var>$fe</var></td>
            </tr>
            <tr>
              <td></td>
              <td>Row State</td>
              <td>1 byte</td>
              <td><var>0</var>=original, <var>1</var>=deleted, <var>2</var>=inserted, <var>3</var>=modified</td>
            </tr>
            <tr>
              <td></td>
              <td>Update Order</td>
              <td>4 bytes</td>
              <td></td>
            </tr>
            <tr>
              <td></td>
              <td>Null Bitmap</td>
              <td>Variable length.</td>
              <td>
                1 byte required for eight fields; 2 bytes for 16 fields, etc. See Field Definition Count. Bit values are set to <var>1</var> when the corresponding field is null.
              </td>
            </tr>
            <tr>
              <td><b>Row Data</b></td>
              <td>Optional Field Length</td>
              <td>4 bytes</td>
              <td>Variable-length fields are prefixed with their length. Fixed-length fields do not require this entry. Null fields are not stored.
              </td>
            </tr>
            <tr>
              <td></td>
              <td>Field Data</td>
              <td>Bytes values for the field. See Optional Field Length.</td>
              <td>Occurs the number of times needed for Field Definition Count.</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TDatapacketReader">TDatapacketReader</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <element name="TFpcBinaryDatapacketReader.FpcBinaryIdent1">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.FpcBinaryIdent2">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.StringFieldTypes">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.BlobFieldTypes">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.VarLenFieldTypes">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.FNullBitmapSize">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.FNullBitmap">
        <short></short>
      </element>
      <!-- visibility: protected -->
      <element name="TFpcBinaryDatapacketReader.FVersion">
        <short></short>
      </element>

      <!-- visibility: public -->
      <element name="TFpcBinaryDatapacketReader.Create">
        <short>Constructor for the class instance</short>
      </element>
      <element name="TFpcBinaryDatapacketReader.Create.ADataSet">
        <short>Dataset associated with the data packet reader</short>
      </element>
      <element name="TFpcBinaryDatapacketReader.Create.AStream">
        <short>Stream used to read values handled in the data packet reader</short>
      </element>

      <element name="TFpcBinaryDatapacketReader.LoadFieldDefs">
        <short>Loads field definitions using the data packet reader</short>
      </element>
      <element name="TFpcBinaryDatapacketReader.LoadFieldDefs.AnAutoIncValue">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.StoreFieldDefs">
        <short>Stores field definitions using the data packet reader</short>
      </element>
      <element name="TFpcBinaryDatapacketReader.StoreFieldDefs.AnAutoIncValue">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.InitLoadRecords">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.GetCurrentRecord">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.GetCurrentRecord.Result">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.GetRecordRowState">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.GetRecordRowState.Result">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.GetRecordRowState.AUpdOrder">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.RestoreRecord">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.GotoNextRecord">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.StoreRecord">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.StoreRecord.ARowState">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.StoreRecord.AUpdOrder">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.FinalizeStoreRecords">
        <short></short>
      </element>

      <element name="TFpcBinaryDatapacketReader.RecognizeStream">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.RecognizeStream.Result">
        <short></short>
      </element>
      <element name="TFpcBinaryDatapacketReader.RecognizeStream.AStream">
        <short></short>
      </element>

      <element name="TCustomBufDataset" link="#fcl.Db.TDBDataset">
        <short>
          Ancestor class for a database-aware buffered dataset
        </short>
        <descr>
          <p>
            <var>TCustomBufDataset</var> is a <var>TDBDataset</var> descendant that implements the ancestor class for a database-aware buffered dataset. TCustomBufDataset is an in-memory dataset that can be used as a local stand-alone dataset, or it can be used as a local buffer for updates applied to a remote dataset. TCustomBufDataset implements many features similar to those in TClientDataset in Delphi. However, it is <b>not</b> meant to be code or function compatible with TClientDataset. It is designed to provide management of the buffers used to access record data, and is used as the ancestor for classes like <var>TSQLQuery</var> and <var>TRESTBufDataset</var>.
          </p>
          <p>
            As a TDBDataset descendant, it offers access to many of the database features supported in the FCL DB package. As a TDataset descendant, it also offers access to familiar navigation and data handling methods in the ancestor class. TCustomBufDataset has features that allow local storage and retrieval  of field definitions and record data. In addition, facilities are provided that allow local indexing of record data in the dataset. There is a comprehensive parser/expression evaluator available that allows complete support for Filters in the dataset.
          </p>
          <p>
            Do not create instances of TCustomBufDataset. Use the TBufDataset descendant instead.
          </p>
          <p>
            Additional information about using TBufDataset can be found on the Lazarus Wiki at: <url href="http://wiki.freepascal.org/How_to_write_in-memory_database_applications_in_Lazarus/FPC">
              How to write in-memory database applications in Lazarus/FPC (TBufDataset)</url>.
          </p>
        </descr>
        <seealso>
          <link id="TBufDataset">TBufDataset</link>
          <link id="#fcl.Db.TDBDataset">TDBDataset</link>
          <link id="#fcl.Db.TDataset">TDataset</link>
        </seealso>
      </element>

      <!-- visibility: private -->
      <!-- start nested types -->
      <element name="TCustomBufDataset.TIndexType">
        <short>
          Represents index types created in TBufDataset
        </short>
        <descr>
          <p>
            <var>TIndexType</var> is an enumeration type that contains values that represent the type for an index created in TBufDataset. Values in TIndexType indicate whether an index is transient or defined in the index definitions for a dataset. TIndexType is the type used for the IndexType property in TBufDatasetIndex.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex.IndexType">TBufDatasetIndex.IndexType</link>
          <link id="TBufDatasetIndexDefs">TBufDatasetIndexDefs</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.TIndexType.itNormal">
        <short>An index represented by an index definition</short>
      </element>
      <element name="TCustomBufDataset.TIndexType.itDefault">
        <short>An index created as the default order for a dataset</short>
      </element>
      <element name="TCustomBufDataset.TIndexType.itCustom">
        <short>A custom index created using the index field names in the dataset</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex" link="#fcl.Db.TIndexDef">
        <short>
          Implements a wrapper for an index in TBufDataset
        </short>
        <descr>
          <p>
            <var>TBufDatasetIndex</var> is a <var>TIndexDef</var> descendant that provides a wrapper for an index in TBufDataset. TBufDatasetIndex contains a type field that identifies whether the index is transient (discarded on close) or defined using an index definition. It also provides access to methods and properties for the index storage mechanism defined in TBufIndex.
          </p>
          <p>
            TBufDatasetIndex class instances are stored in the TBufDatasetIndexDefs type, and accessed using its BufIndexDefs property. TBufDatasetIndex is the type used for the CurrentIndexDef and BufIndexDefs properties in TBufDataset.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndexDefs">TBufDatasetIndexDefs</link>
          <link id="#fcl.Db.TIndexDef">TIndexDef</link>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TBufDataset.CurrentIndexDef">TBufDataset.CurrentIndexDef</link>
          <link id="TBufDataset.BufIndexDefs">TBufDataset.BufIndexDefs</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.FBufferIndex"/>
      <element name="TCustomBufDataset.TBufDatasetIndex.FDiscardOnClose"/>
      <element name="TCustomBufDataset.TBufDatasetIndex.FIndexType"/>

      <element name="TCustomBufDataset.TBufDatasetIndex.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for the class instance. Destroy calls ClearIndex to free the index storage allocated in BufferIndex. Destroy calls the inherited destructor.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex.ClearIndex">TBufDatasetIndex.ClearIndex</link>
          <link id="TBufDatasetIndex.BufferIndex">TBufDatasetIndex.BufferIndex</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.ClearIndex">
        <short>Removes the index storage allocated to BufferIndex</short>
        <descr></descr>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.SetIndexProperties">
        <short>
          Updates property values in BufferIndex to match the collection item
        </short>
        <descr>
          <p>
            <var>SetIndexProperties</var> is used to set the value for properties in BufferIndex to the corresponding values from the class instance. SetIndexProperties assigns the following values from the collection item to BufferIndex:
          </p>
          <ul>
            <li>Index</li>
            <li>Name</li>
            <li>Fields</li>
            <li>DescFields</li>
            <li>CaseInsFields</li>
            <li>Options</li>
          </ul>
          <p>
            No actions are performed in the method when BufferIndex has not been assigned (contains <var>Nil</var>).
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufferIndex">TCustomBufDataset.BufferIndex</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.MustBuild">
        <short>
          Indicates if the specified index must be created
        </short>
        <descr>
          <p>
            <var>MustBuild</var> is a <var>Boolean</var> function that indicates if storage for the index in aCurrent must be created. The return value is <var>True</var> when IndexType indicates a non-default index type (contains <var>itNormal</var> or <var>itCustom</var>) and aCurrent is the active index for its dataset. Default indexes (<var>itDefault</var>) are not built in the method. Custom indexes (<var>itCustom</var>) are built only when it is not the selected index for its dataset.
          </p>
          <p>
            MustBuild is used in the TCustomBufDataset.BuildIndexes method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BuildIndexes">TCustomBufDataset.BuildIndexes</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndex.MustBuild.Result">
        <short>True if the index needs to be created</short>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndex.MustBuild.aCurrent">
        <short>Index to examine in the method</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.IsActiveIndex">
        <short>
          Indicates if the specified index is an active index for its dataset
        </short>
        <descr>
          <var>IsActiveIndex</var> is a <var>Boolean</var> function which indicates if the index specified in aCurrent is an active index for its dataset. The return value is <var>True</var> if the index needs to be updated after editing or removing a record in its dataset.
        </descr>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndex.IsActiveIndex.Result">
        <short>True if the index should be updated</short>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndex.IsActiveIndex.aCurrent">
        <short>Index to examine in the method</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.BufferIndex">
        <short>
          Represents the storage and access mechanism used for the index
        </short>
        <descr>
          <p>
            <var>BufferIndex</var> is a <var>TBufIndex</var> property that represents the mechanism used to store, access, and maintain values in the index. BufferIndex is the type returned when reading the value in the TBufDatasetIndexDefs.BufIndexes property.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndexDefs.BufIndexes">TBufDatasetIndexDefs.BufIndexes</link>
          <link id="TCustomBufDataset.BuildIndex">TCustomBufDataset.BuildIndex</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.DiscardOnClose">
        <short>
          Indicates if the index is discarded when its dataset is closed
        </short>
        <descr>
          <p>
            <var>DiscardOnClose</var> is a read-only <var>Boolean</var> property which indicates if the index is discarded when its dataset is closed. DiscardOnClose is normally set to <var>True</var> for default or custom indexes (where IndexType contains <var>itDefault</var> or <var>itCustom</var>) created when a dataset is opened.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.InternalClose">
            TCustomBufDataset.InternalClose
          </link>
          <link id="TCustomBufDataset.InitDefaultIndexes">
            TCustomBufDataset.InitDefaultIndexes
          </link>
          <link id="TCustomBufDataset.AddIndex">
            TCustomBufDataset.AddIndex
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndex.IndexType">
        <short>
          Indicates the type of index and controls when the index is created and/or freed
        </short>
        <descr>
          <var>IndexType</var> is a <var>TIndexType</var> property which indicates the type of index and controls when the index is created and/or freed. See IndexType for more information about the values and meanings used in the property.
        </descr>
        <seealso>
          <link id="TCustomBufDataset.InitUserIndexes">
            TCustomBufDataset.InitUserIndexes
          </link>
          <link id="TCustomBufDataset.InitDefaultIndexes">
            TCustomBufDataset.InitDefaultIndexes
          </link>
          <link id="TCustomBufDataset.InternalClose">
            TCustomBufDataset.InternalClose
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs">
        <short>
          Container for index definitions and storage added to TBufDataset
        </short>
        <descr>
          <p>
            <var>TBufDatasetIndexDefs</var> is a <var>TIndexDefs</var> descendant used as a container for index definitions and index storage added to TBufDataset. TBufDatasetIndexDefs extends the ancestor class to include methods and properties needed to access TBufDatasetIndex and TBufIndex values for an index. TBufDatasetIndexDefs is the type used for an internal member in TBufDataset which provides access to its index definitions and storage mechanisms.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TBufDataset.GetIndexDefs">TBufDataset.GetIndexDefs</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufDatasetIndex">
        <short>
          Gets the value for the BufIndexdefs property
        </short>
        <descr>
          <p>
            <var>GetBufDatasetIndex</var> is a <var>TBufDatasetIndex</var> function used to get the value foe the indexed BufIndexdefs property. AIndex is the ordinal position for the index  used as the return value for the method. GetBufDatasetIndex gets the specified index from the Items property for the collection.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">
            TBufDatasetIndex
          </link>
          <link id="TBufDatasetIndexDefs.BufIndexDefs">
            TBufDatasetIndexDefs.BufIndexDefs
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufDatasetIndex.Result">
        <short>Index stored at the specified position</short>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufDatasetIndex.AIndex">
        <short>Ordinal position for the requested index</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufferIndex">
        <short>
          Get the value for the BufIndexes property
        </short>
        <descr>
          <p>
            <var>GetBufferIndex</var> is a <var>TBufIndex</var> function used to get the value for the indexed BufIndexes property. AIndex is the ordinal position for the index storage mechanism requested in the method. GetBufferIndex gets the BufferIndex value stored at the specified position in the BufIndexdefs property.
          </p>
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufferIndex.Result">
        <short>Index storage mechanism at the requested position</short>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.GetBufferIndex.AIndex">
        <short>Ordinal position for the request index storage mechanism</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
            <var>Create</var> calls the inherited constructor using the aDataset argument as the owner of Items added to the collection. TBufDatasetIndex is used as the class type for items in the collection.
        </descr>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.Create.aDataset">
        <short>Dataset that owns the items in the collection</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.FindIndex">
        <short>
          Locates the collection item with the specified name
        </short>
        <descr>
          <var>FindIndex</var> is a <var>TBufDatasetIndex</var> function used to locate the collection item with the name specified in IndexName. FindIndex calls the IndexOf method to find the collection item with the specified name. If a matching item is found, the corresponding value in BufIndexDefs is used as the return value. The return value is <var>Nil</var> if the specified name is not found in the collection.
        </descr>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.FindIndex.Result">
        <short>Index with the specified name, or Nil</short>
      </element>
      <element name="TCustomBufDataset.TBufDatasetIndexDefs.FindIndex.IndexName">
        <short>Name of the index to locate in the collection</short>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.BufIndexdefs">
        <short>
          Provides access to the index definitions for the dataset
        </short>
        <descr>
          BufIndexdefs is an indexed read-only TBufDatasetIndex property. BufIndexdefs provides access to the index definitions for the dataset.
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.TBufDatasetIndexDefs.BufIndexes">
        <short>
          Provides access to the index storage mechanisms allocated for the dataset
        </short>
        <descr>
          <p>
            <var>BufIndexes</var> is an indexed read-only <var>TBufIndex</var> property. BufIndexes provides access to the index storage mechanisms allocated for indexes in the dataset.
          </p>
        </descr>
        <seealso>
          <link id="TBufIndex">TBufIndex</link>
        </seealso>
      </element>
      <!-- end nested types -->

      <element name="TCustomBufDataset.BuildCustomIndex">
        <short>
          Builds the custom index using the fields in the IndexFieldNames property
        </short>
        <descr>
          <p>
            <var>BuildCustomIndex</var> is a procedure used to build the custom index (<var>'CUSTOM_ORDER'</var>) for the dataset. The custom index uses the field names specified in the IndexFieldNames property to construct an index with the values needed to sort records in the dataset.
          </p>
          <p>
            BuildCustomIndex examines the indexes defined for the dataset to determine if an index with the name <var>'CUSTOM_ORDER'</var> already exists. If the index is not found, it is initialized by calling the InitDefaultIndexes method. Values in IndexFieldNames are examined to determine if any fields are declared using descending order. The fields names are separated and stored in either the SortFields or DescFields property for the TBufDatasetIndex.
          </p>
          <p>
            The index is assigned as the current index for the dataset. When the dataset is Active, the FetchAll method is called, and BuildIndex is called to populate the values in the index.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">
            TBufDatasetIndex
          </link>
          <link id="TCustomBufDataset.IndexFieldNames">
            TCustomBufDataset.IndexFieldNames
          </link>
          <link id="TCustomBufDataset.BuildIndex">
            TCustomBufDataset.BuildIndex
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.GetBufIndex" link="TCustomBufDataset.BufIndexes">
        <short>Gets the value for the BufIndexes property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetBufIndex.Result">
        <short>Index at the specified position</short>
      </element>
      <element name="TCustomBufDataset.GetBufIndex.AIndex">
        <short>Ordinal position of the index</short>
      </element>

      <element name="TCustomBufDataset.GetBufIndexDef"  link="TCustomBufDataset.BufIndexDefs">
        <short>Gets the value for the BufIndexDefs property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetBufIndexDef.Result">
        <short>Index definition at the specified position</short>
      </element>
      <element name="TCustomBufDataset.GetBufIndexDef.AIndex">
        <short>Ordinal position for the index definition</short>
      </element>

      <element name="TCustomBufDataset.GetCurrentIndexBuf"  link="TCustomBufDataset.CurrentIndexBuf">
        <short>Gets the value for the CurrentIndexBuf property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetCurrentIndexBuf.Result">
        <short>Value for the CurrentIndexBuf property</short>
      </element>

      <element name="TCustomBufDataset.InitUserIndexes">
        <short>
          Initializes user indexes defined for the dataset
        </short>
        <descr>
          <p>
            <var>InitUserIndexes</var> is a procedure used to initialize user indexes (as opposed to a default or custom index). InitUserIndexes examines each of the items in the BufIndexDefs property to determine if the index is a user index. When the item has the value <var>itNormal</var> in its IndexType property, the index is initialized by calling the InternalCreateIndex method.
          </p>
          <p>
            InitUserIndexes is called from the InternalOpen method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">
            TCustomBufDataset.BufIndexDefs
          </link>
          <link id="TCustomBufDataset.InternalOpen">
            TCustomBufDataset.InternalOpen
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.FFileName"/>
      <element name="TCustomBufDataset.FReadFromFile"/>
      <element name="TCustomBufDataset.FFileStream"/>
      <element name="TCustomBufDataset.FDatasetReader"/>
      <element name="TCustomBufDataset.FMaxIndexesCount"/>
      <element name="TCustomBufDataset.FDefaultIndex"/>
      <element name="TCustomBufDataset.FCurrentIndexDef"/>
      <element name="TCustomBufDataset.FFilterBuffer"/>
      <element name="TCustomBufDataset.FBRecordCount"/>
      <element name="TCustomBufDataset.FReadOnly"/>
      <element name="TCustomBufDataset.FSavedState"/>
      <element name="TCustomBufDataset.FPacketRecords"/>
      <element name="TCustomBufDataset.FRecordSize"/>
      <element name="TCustomBufDataset.FIndexFieldNames"/>
      <element name="TCustomBufDataset.FIndexName"/>
      <element name="TCustomBufDataset.FNullmaskSize"/>
      <element name="TCustomBufDataset.FOpen"/>
      <element name="TCustomBufDataset.FUpdateBuffer"/>
      <element name="TCustomBufDataset.FCurrentUpdateBuffer"/>
      <element name="TCustomBufDataset.FAutoIncValue"/>
      <element name="TCustomBufDataset.FAutoIncField"/>
      <element name="TCustomBufDataset.FIndexes"/>
      <element name="TCustomBufDataset.FParser"/>
      <element name="TCustomBufDataset.FFieldBufPositions"/>
      <element name="TCustomBufDataset.FAllPacketsFetched"/>
      <element name="TCustomBufDataset.FOnUpdateError"/>
      <element name="TCustomBufDataset.FBlobBuffers"/>
      <element name="TCustomBufDataset.FUpdateBlobBuffers"/>
      <element name="TCustomBufDataset.FManualMergeChangeLog"/>
      <element name="TCustomBufDataset.FRefreshing"/>

      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct">
        <short>
          Populates the comparison structure needed to build an index for the specified arguments
        </short>
        <descr>
          <p>
            <var>ProcessFieldsToCompareStruct</var> is a procedure used to populate the comparison structure needed to build an index for the specified arguments. ProcessFieldsToCompareStruct loads the specified ordinary, descending, and case-insensitive fields into the ACompareStruct parameter. This includes setting the comparison routine used for the corresponding field data types supported in TBufDataset.
          </p>
          <p>
            ProcessFieldsToCompareStruct is used in the BuildIndex method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BuildIndex">TCustomBufDataset.BuildIndex</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.AFields">
        <short>Fields for the comparison structure</short>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.ADescFields">
        <short>Descending fields for the comparison structure</short>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.ACInsFields">
        <short>Case-insensitive fields for the comparison structure</short>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.AIndexOptions">
        <short>Index options for the comparison structure</short>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.ALocateOptions">
        <short>Locate options for the comparison structure</short>
      </element>
      <element name="TCustomBufDataset.ProcessFieldsToCompareStruct.ACompareStruct">
        <short>Comparison structure updated in the method</short>
      </element>

      <element name="TCustomBufDataset.BufferOffset">
        <short>
          Gets the offset to the data buffer in the record
        </short>
        <descr>
          <p>
            <var>BufferOffset</var> is an <var>Integer</var> function used to get the offset to the data buffer in the record for the dataset. BufferOffset is derived by computing the size used for TBufRecLinkItem instances in the record buffer, as determined by the MaxIndexesCount property.
          </p>
          <p>
            BufferOffset is used in methods which allocate, populate, or update a record buffer in the dataset.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.BufferOffset.Result">
        <short>Offset in bytes to the data for the record buffer</short>
      </element>

      <element name="TCustomBufDataset.GetFieldSize">
        <short>
          Gets the size (in bytes) needed for data using the specified field definition
        </short>
        <descr>
          <p>
            <var>GetFieldSize</var> is a <var>LongInt</var> function used to get the storage size for the specified field definition. The return value contains the number of bytes required to store data for the field data type in FieldDef. The following field types are supported with the indicated size:
          </p>
          <dl>
            <dt>ftUnknown</dt>
            <dd>0 bytes</dd>
            <dt>ftString, ftGuid, ftFixedChar</dt>
            <dd>(field size * character size)+ 1 (Null terminator)</dd>
            <dt>ftFixedWideChar, ftWideString</dt>
            <dd>(field size + 1) * character size</dd>
            <dt>ftSmallint, ftInteger, ftAutoInc, ftword</dt>
            <dd>sizeof(LongInt)</dd>
            <dt>ftBoolean</dt>
            <dd>sizeof(WordBool)</dd>
            <dt>ftBCD</dt>
            <dd>sizeof(Currency)</dd>
            <dt>ftFmtBCD</dt>
            <dd>sizeof(TBCD)</dd>
            <dt>ftFloat, ftCurrency</dt>
            <dd>sizeof(Double)</dd>
            <dt>ftLargeInt</dt>
            <dd>sizeof(LargeInt)</dd>
            <dt>ftTime, ftDate, ftDateTime</dt>
            <dd>sizeof(TDateTime)</dd>
            <dt>ftBytes</dt>
            <dd>field size</dd>
            <dt>ftVarBytes</dt>
            <dd>field size + 2</dd>
            <dt>ftVariant</dt>
            <dd>sizeof(Variant)</dd>
            <dt>ftBlob, ftMemo, ftGraphic, ftFmtMemo, ftParadoxOle, ftDBaseOle, ftTypedBinary, ftOraBlob, ftOraClob, ftWideMemo</dt>
            <dd>sizeof(TBufBlobField)</dd>
          </dl>
          <p>
            GetFieldSize calls DatabaseErrorFmt if a field type other the previous is found in the AFields argument.
          </p>
          <p>
            GetFieldSize is used in methods that read or write data using record buffers, such as: LoadBuffer, GetFieldData, SetFieldData, BuildIndex, and CalcRecordSize. It is also used when creating TBufBlobStream class instances for Blob fields in the dataset.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.GetFieldSize.Result">
        <short>Number of bytes needed for the specified field definition</short>
      </element>
      <element name="TCustomBufDataset.GetFieldSize.FieldDef">
        <short>Field definition examined in the method</short>
      </element>

      <element name="TCustomBufDataset.CalcRecordSize">
        <short>
          Calculates the record size for defined fields in the dataset
        </short>
        <descr>
          <p>
            <var>CalcRecordSize</var> is a procedure used to calculate the total record size for defined fields in the dataset. The calculated record size includes the number of bytes required to store data for each of the field definitions in FieldDefs, as well as the number of bytes needed for the Null mask which flags fields with a <var>NULL</var> value. The calculated record size is stored in the RecordSize property.
          </p>
          <p>
            CalcRecordSize is called when the dataset is opened (sets its Active property to <var>True</var>).
          </p>
        </descr>
      </element>

      <element name="TCustomBufDataset.IntAllocRecordBuffer">
        <short>
          Allocates a record buffer for a row in the dataset
        </short>
        <descr>
          <p>
            <var>IntAllocRecordBuffer</var> is a <var>TRecordBuffer</var> function used to allocate a record buffer for a row in the dataset. The record buffer in the return value includes space needed for data and a Bookmark (allocated at runtime). IntAllocRecordBuffer calls AllocMem to reserve the number of bytes indicated by RecordSize and BuffOffset.
          </p>
          <p>
            IntAllocRecordBuffer is called in methods which create or update record buffers or indexes. IntAllocRecordBuffer is also called when the dataset is opened (sets its Active property to <var>True</var>).
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.IntAllocRecordBuffer.Result">
        <short>Record buffer for row data in the dataset</short>
      </element>

      <element name="TCustomBufDataset.IntLoadFieldDefsFromFile">
        <short>Performs actions needed to load field definitions from a file</short>
        <descr></descr>
      </element>

      <element name="TCustomBufDataset.IntLoadRecordsFromFile">
        <short>
          Performs actions needed to load records from a file
        </short>
        <descr>
          <p>
            <var>IntLoadRecordsFromFile</var> is a procedure used to perform actions needed to load records from a file. IntLoadRecordsFromFile calls CheckBiDirectional to ensure that the dataset has been opened with its UniDirectional property set to <var>False</var>. An exception is raised if UniDirectional contains <var>True</var>.
          </p>
          <p>
            IntLoadRecordsFromFile uses the internal TDataPacketReader assigned in the class instance when LoadFromFile or LoadFromStream is executed.The packet reader is used to get each of the record buffers in the data packet, examine their content, and apply them using the default index (<var>'DEFAULT_ORDER'</var>) for the dataset.
          </p>
          <p>
            The TRowState enumeration value in each record buffer is used to determine how the buffer is applied to the dataset. When needed, an internal update buffer is added to an existing record buffer. If a required record update buffer is not available, an exception is raised in the method.
          </p>
          <p>
            The AddRecord method in the default index is called as needed, and the next record buffer is read from the data packet. When all record (and update) buffers have been read and applied, the dataset is moved to the first record in the default index. The file stream and packet reader assigned in the class instance are freed.
          </p>
          <p>
            IntLoadRecordsFromFile calls the BuildIndexes method to update the indexes defined for the dataset.
          </p>
          <p>
            IntLoadRecordsFromFile is called from the InternalOpen method.
          </p>
        </descr>
        <seealso>
          <link id="TDataPacketReader">TDataPacketReader</link>
          <link id="#fcl.Db.TDataset.UniDirectional">TDataset.UniDirectional</link>
          <link id="TRecordBuffer">TRecordBuffer</link>
          <link id="TRowState">TRowState</link>
          <link id="TCustomBufDataset.InternalOpen">
            TCustomBufDataset.InternalOpen
          </link>
          <link id="TCustomBufDataset.LoadFromFile">
            TCustomBufDataset.LoadFromFile
          </link>
          <link id="TCustomBufDataset.LoadFromStream">
            TCustomBufDataset.LoadFromStream
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.GetCurrentBuffer">
        <short>
          Gets the record buffer for the current dataset state
        </short>
        <descr>
          <p>
            <var>GetCurrentBuffer</var> is a <var>TRecordBuffer</var> function used to get values in the record buffer for the current dataset state. The State property is used to determine the content in the TRecordBuffer return value. Special handling is provided for the following dataset State values:
          </p>
          <dl>
            <dt>dsCalcFields</dt>
            <dd>Uses values from the CalcBuffer property</dd>
            <dt>dsFilter</dt>
            <dd>Uses the internal Filter buffer retrieved in GetRecord</dd>
            <dt>dsRefreshFields</dt>
            <dd>Uses the record buffer as read from the active index in the dataset</dd>
          </dl>
          <p>
            For all other values in State, the content in the ActiveBuffer property is used as the return value for the method.
          </p>
          <p>
            GetCurrentBuffer is called when processing field data in the GetFieldData and SetFieldData methods. It is also called when records are filtered in the DoFilterRecord method.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.GetCurrentBuffer.Result">
        <short>Record buffer values for the current dataset state</short>
      </element>

      <element name="TCustomBufDataset.CurrentRecordToBuffer">
        <short>
          Gets the values for the current record buffer using index storage
        </short>
        <descr>
          <p>
            <var>CurrentRecordToBuffer</var> is a procedure used to get the values for the current record buffer using the index storage mechanism for the dataset.
          </p>
          <p>
            CurrentRecordToBuffer uses the CurrentIndexBuf property to access the index storage mechanism for the dataset. Its current record buffer is copied into the specified Buffer using the RecordSize for the dataset. A Bookmark is created for the current record in the index, and used to update the current record in the dataset.
          </p>
          <p>
            CurrentRecordToBuffer calls GetCalcFields to derive the calculated field values for the specified Buffer.
          </p>
          <p>
            CurrentRecordToBuffer is called from the GetRecord and ApplyUpdates methods.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.CurrentRecordToBuffer.Buffer">
        <short>Buffer with values for the current record</short>
      </element>

      <element name="TCustomBufDataset.LoadBuffer">
        <short>
          Loads the specified record buffer into the defined fields for the dataset
        </short>
        <descr>
          <p>
            <var>LoadBuffer</var> is a <var>TGetResult</var> function used to load the contents of the specified record buffer into the defined fields for the dataset. The return value is <var>grEOF</var> if not data is available, or <var>grOK</var> when values in Buffer have been loaded into the fields for the dataset.
          </p>
          <p>
            LoadBuffer ensures that defined Indexes for the dataset have been created. LoadBuffer reads the Null bitmap mask from the values in Buffer using the number of bytes indicated in NullMaskSize. LoadField is called for each of the defined fields in FieldDefs, and NullMask is updated when a field is not present in Buffer data. CreateBlobField is also called for field definitions that contain a Blob field.
          </p>
          <p>
            LoadBuffer is called from methods like GetRecord, FetchAll, and GetNextPacket.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.LoadBuffer.Result">
        <short>Status for the get operation</short>
      </element>
      <element name="TCustomBufDataset.LoadBuffer.Buffer">
        <short>Record buffer with values to load in the dataset</short>
      </element>

      <element name="TCustomBufDataset.FetchAll">
        <short>
          Retrieves all data packets for the buffered dataset
        </short>
        <descr>
          <p>
            <var>FetchAll</var> is a procedure used to retrieve all data packets for the buffered dataset. FetchAll repeatedly calls the GetNextPacket method to load data packets until the number of packets exceeds the value in the PacketRecords property, or PacketRecords contains the value <var>-1</var>.
          </p>
          <p>
            FetchAll is used in the implementation of the InternalLast, InternalCreateIndex, and BuildCustomIndex methods.
          </p>
        </descr>
      </element>

      <element name="TCustomBufDataset.GetRecordUpdateBuffer">
        <short>
          Gets the update buffer for the record with the specified bookmark
        </short>
        <descr>
          <p>
            <var>GetRecordUpdateBuffer</var> is a <var>Boolean</var> function used to get the update buffer for the record with the bookmark specified in ABookmark.
          </p>
          <p>
            IncludePrior indicates if previous update buffers are included in a search for for a deleted record.
          </p>
          <p>
            AFindNext indicates if update buffers are searched starting at the beginning of the buffer storage. When AFindNext is <var>False</var>, the update buffer after the CurrentUpdateBuffer is used as the first value in the search.
          </p>
          <p>
            The return value is <var>True</var> when a buffer is found in the internal update buffers that matches the Bookmark. The position is used as the new value for the internal CurrentUpdateBuffer.
          </p>
          <p>
            GetRecordUpdateBuffer is used in the implementation of methods in TCustomBufDataset, such as:  GetActiveRecordUpdateBuffer, GetRecordUpdateBufferCached, and GetDatasetPacket.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.GetActiveRecordUpdateBuffer">
            TCustomBufDataset.GetActiveRecordUpdateBuffer
          </link>
          <link id="TCustomBufDataset.GetRecordUpdateBufferCached">
            TCustomBufDataset.GetRecordUpdateBufferCached
          </link>
          <link id="TCustomBufDataset.GetDatasetPacket">
            TCustomBufDataset.GetDatasetPacket
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBuffer.Result">
        <short>True when an update buffer exists for the Bookmark</short>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBuffer.ABookmark">
        <short>Bookmark to locate in the update buffers</short>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBuffer.IncludePrior">
        <short>Include prior update buffers in a search for deletions</short>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBuffer.AFindNext">
        <short>Search update buffers starting at the next position</short>
      </element>

      <element name="TCustomBufDataset.GetRecordUpdateBufferCached">
        <short>
          Gets the cached update buffer for the record with the specified bookmark
        </short>
        <descr>
          <p>
            <var>GetRecordUpdateBufferCached</var> is a <var>Boolean</var> function used to get the cached update buffer for the record with the specified bookmark. ABookmark contains the bookmark to locate in the allocated update buffers for the dataset. IncludePrior indicates if update buffers for prior records are examined in the method.
          </p>
          <p>
            GetRecordUpdateBufferCached is very similar to GetRecordUpdateBuffer, but it returns <var>True</var> immediately if the current update buffer matches the requested bookmark. Otherwise, GetRecordUpdateBuffer is called to get the return value for the method.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBufferCached.Result">
        <short>True when an update buffer exists for the Bookmark</short>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBufferCached.ABookmark">
        <short>Bookmark to locate in the existing update buffers</short>
      </element>
      <element name="TCustomBufDataset.GetRecordUpdateBufferCached.IncludePrior">
        <short>Include the prior update buffer in a search for deletions</short>
      </element>

      <element name="TCustomBufDataset.GetActiveRecordUpdateBuffer">
        <short>
          Gets the update buffer for the ActiveRecord in the dataset
        </short>
        <descr>
          <p>
            <var>GetActiveRecordUpdateBuffer</var> is a <var>Boolean</var> function used to get the update buffer for the ActiveRecord in the dataset. GetActiveRecordUpdateBuffer calls GetBookmarkData to retrieve the bookmark from the values in ActiveBuffer. The Bookmark is used to get an existing update buffer for the record using the GetRecordUpdateBufferCached method. The return value is <var>True</var> if an existing update buffer was found for the active record in the dataset.
          </p>
          <p>
            GetActiveRecordUpdateBuffer is used in methods such as: GetFieldData, InternalDelete, InternalPost, RevertRecord, and UpdateStatus.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.GetActiveRecordUpdateBuffer">
            TCustomBufDataset.GetActiveRecordUpdateBuffer
          </link>
          <link id="TCustomBufDataset.ActiveBuffer">
            TCustomBufDataset.ActiveBuffer
          </link>
          <link id="TCustomBufDataset.GetFieldData">
            TCustomBufDataset.GetFieldData
          </link>
          <link id="TCustomBufDataset.InternalDelete">
            TCustomBufDataset.InternalDelete
          </link>
          <link id="TCustomBufDataset.InternalPost">
            TCustomBufDataset.InternalPost
          </link>
          <link id="TCustomBufDataset.RevertRecord">
            TCustomBufDataset.RevertRecord
          </link>
          <link id="TCustomBufDataset.UpdateStatus">
            TCustomBufDataset.UpdateStatus
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetActiveRecordUpdateBuffer.Result">
        <short>True when an update buffer exists for the active record</short>
      </element>

      <element name="TCustomBufDataset.CancelRecordUpdateBuffer">
        <short>
          Cancels the update buffer at the specified position in the internal update buffers
        </short>
        <descr>
          <p>
            <var>CancelRecordUpdateBuffer</var> is a procedure used to cancel the internal update buffer at the position specified in AIndex. ABookmark is a variable parameter which is updated in the method to contain the Bookmark for the record affected in the cancel operation. The value is extracted from the update buffer (when assigned). Update buffers with no bookmark data have already been handled, and are excluded from duplicate processing in the method. The value in the bookmark is set to <var>Nil</var> when the cancel operation is successfully completed in the method.
          </p>
          <p>
            The update kind (TUpdateKind) for the specified update buffer is examined to determine the actions required in the method. The following actions are performed for update kind values:
          </p>
          <dl>
            <dt>ukModify</dt>
            <dd>
              The record is accessed by its Bookmark value using the currently selected index. The buffer data in OldValuesBuffer is moved to the record buffer for the current record in the dataset. Memory allocated to OldValuesBuffer is freed.
            </dd>
            <dt>ukDelete</dt>
            <dd>
              The update buffer for a deleted record requires access to the OldValuesBuffer in order to cancel the delete request. When it has been assigned, the next record in the currently selected index is located using the NextBookmarkData in the update buffer. Values in the update buffer are re-inserted immediately prior to the next bookmark value. Memory allocated to OldValuesBuffer is freed.
            </dd>
            <dt>ukInsert</dt>
            <dd>
              The currently selected index is used to scroll forward to the next record, and retrieve its bookmark. The update buffer for the inserted record will be deleted, and the update buffers are relinked prior to removing the record. The Bookmark value is removed from all indexes when the update buffer has been reverted, and the update buffer is freed.
            </dd>
          </dl>
          <p>
            CancelRecordUpdateBuffer is used in the implementation of the RevertRecord and CancelUpdates methods.
          </p>
        </descr>
        <seealso>
          <link id="TRecordsUpdateBuffer">TRecordsUpdateBuffer</link>
          <link id="#fcl.Db.TUpdateKind">TUpdateKind</link>
          <link id="TCustomBufDataset.RevertRecord">TCustomBufDataset.RevertRecord</link>
          <link id="TCustomBufDataset.CancelUpdates">TCustomBufDataset.CancelUpdates</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.CancelRecordUpdateBuffer.AUpdateBufferIndex">
        <short>Index position of the update buffer for the desired record</short>
      </element>
      <element name="TCustomBufDataset.CancelRecordUpdateBuffer.ABookmark">
        <short>Bookmark for the desired record</short>
      </element>

      <element name="TCustomBufDataset.ParseFilter">
        <short>
          Parses the specified filter text
        </short>
        <descr>
          <p>
            <var>ParseFilter</var> is a procedure used to parse the filter text specified in AFilter. ParseFilter ensures that a valid TBufDatasetParser exists for an Active dataset. Partial match and case-sensitivity options for the parser are updated to match the values in the FilterOptions property. The internal parser is used to parse, compile, and evaluate the expression in AFilter.
          </p>
          <p>
            No actions are performed in the method when AFilter is an empty string ()<b>''</b>).
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetParser">TBufDatasetParser</link>
          <link id="TCustomBufDataset.FilterOptions">TCustomBufDataset.FilterOptions</link>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.ParseFilter.AFilter">
        <short>Filter expression to evaluate in the method</short>
      </element>

      <element name="TCustomBufDataset.GetBufUniDirectional" link="TCustomBufDataset.UniDirectional">
        <short>Gets the value for the UniDirectional property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetBufUniDirectional.Result">
        <short>Value for the UniDirectional property</short>
      </element>

      <!-- index handling routines -->
      <element name="TCustomBufDataset.GetIndexDefs" link="TCustomBufDataset.IndexDefs">
        <short>Gets the value for the IndexDefs property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetIndexDefs.Result">
        <short>Value for the IndexDefs property</short>
      </element>

      <element name="TCustomBufDataset.GetIndexFieldNames" link="TCustomBufDataset.IndexFieldNames">
        <short>Gets the value for the IndexFieldNames property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetIndexFieldNames.Result">
        <short>Value for the IndexFieldNames property</short>
      </element>

      <element name="TCustomBufDataset.GetIndexName" link="TCustomBufDataset.IndexName">
        <short>Gets the value for the IndexName property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetIndexName.Result">
        <short>Value for the IndexName property</short>
      </element>

      <element name="TCustomBufDataset.SetIndexFieldNames" link="TCustomBufDataset.IndexFieldNames">
        <short>Sets the value for the IndexFieldNames property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetIndexFieldNames.AValue">
        <short>Value for the IndexFieldNames property</short>
      </element>

      <element name="TCustomBufDataset.SetIndexName" link="TCustomBufDataset.IndexName">
        <short>Sets the value for the IndexName property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetIndexName.AValue">
        <short>Value for the IndexName property</short>
      </element>

      <element name="TCustomBufDataset.SetMaxIndexesCount" link="TCustomBufDataset.MaxIndexesCount">
        <short>Sets the value for the MaxIndexesCount property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetMaxIndexesCount.aValue">
        <short>Value for the MaxIndexesCount property</short>
      </element>

      <element name="TCustomBufDataset.SetBufUniDirectional" link="TCustomBufDataset.UniDirectional">
        <short>Sets the value for the UniDirectional property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetBufUniDirectional.AValue">
        <short>New value for the UniDirectional property</short>
      </element>

      <element name="TCustomBufDataset.DefaultIndex">
        <short>
          Gets the default index for the buffered dataset
        </short>
        <descr>
          <p>
            <var>DefaultIndex</var> is a <var>TBufDatasetIndex</var> function used to get the default index for the buffered dataset. DefaultIndex uses the value stored in an internal member for the default index, and if it has not been assigned, locates the index with the name <var>'DEFAULT_ORDER'</var> in the Indexes for the dataset.
          </p>
          <p>
            DefaultIndex is used in the BuildIndex and DefaultBufferIndex methods.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">
            TBufDatasetIndex
          </link>
          <link id="TCustomBufDataset.BuildIndex">
            TCustomBufDataset.BuildIndex
          </link>
          <link id="TCustomBufDataset.DefaultBufferIndex">
            TCustomBufDataset.DefaultBufferIndex
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.DefaultIndex.Result">
        <short>Default index for the dataset</short>
      </element>

      <element name="TCustomBufDataset.DefaultBufferIndex">
        <short>
          Gets the storage mechanism used for the default index
        </short>
        <descr>
          <p>
            <var>DefaultBufferIndex</var> is a <var>TBufIndex</var> function  used to get the storage mechanism used for the default index. The return value contains the index storage mechanism allocated for DefaultIndex in its BufferIndex property, or <var>Nil</var> when DefaultIndex has not been assigned in the dataset.
          </p>
          <p>
            DefaultBufferIndex is called from methods which load packet data, or load records from a file on the local file system.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.GetNextPacket">
            TCustomBufDataset.GetNextPacket
          </link>
          <link id="TCustomBufDataset.IntLoadRecordsFromFile">
            TCustomBufDataset.IntLoadRecordsFromFile
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.DefaultBufferIndex.Result">
        <short>Index storage mechanism for the default index</short>
      </element>

      <element name="TCustomBufDataset.InitDefaultIndexes">
        <short>
          Initializes the default indexes for the dataset
        </short>
        <descr>
          <p>
            <var>InitDefaultIndexes</var> is a procedure used to initialize the default indexes for the dataset. InitDefaultIndexes ensures that two indexes exist  for the dataset:  <var>'DEFAULT_ORDER'</var> and <var>'CUSTOM_ORDER'</var>. <var>'DEFAULT_ORDER'</var> is the order in which the records arrived in the dataset (from the server or locally). <var>'CUSTOM_ORDER'</var> is an internal index constructed using values for fields specified  in the IndexFieldNames property. The custom index is populated when the dataset is not marked as a UniDirectional dataset.
          </p>
          <p>
            InitDefaultIndexes sets the current index to the <var>'DEFAULT_ORDER'</var> index.
          </p>
          <p>
            InitDefaultIndexes updates the value in the BookmarkSize property to match the value used in the current index.
          </p>
          <p>
            InitDefaultIndexes is called from the BuildCustomIndex method, and from InternalOpen when the dataset is opened (sets its Active property to <var>True</var>).
          </p>
        </descr>
      </element>

      <element name="TCustomBufDataset.BuildIndex">
        <short>
          Generates an index using the specified index definition
        </short>
        <descr>
          <p>
            <var>BuildIndex</var> is a procedure used to build the index specified in AIndex. BuildIndex creates temporary lists that are used to process index fields, descending fields, and case-insensitive fields defined in AIndex. DatabaseErrorFmt is called to raise an exception if no index fields have been defined in AIndex. ProcessFieldsToCompareStruct is called to generate the TDBCompareStruct needed to compare and sort field values in the index.
          </p>
          <p>
            BuildIndex uses the default index (<var>'DEFAULT_ORDER'</var>) to supply the records that need to be compared and sorted in the index. The Prior and Next values in its index storage are used to get the values copied into the new index. IndexCompareRecords is called to get the relative sort order for records in the index, and a Merge-Sort algorithm is used to derive the index order for the new values.
          </p>
          <p>
            BuildIndex is called from the BuildIndexes, BuildCustomIndex, and InternalCreateIndex methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BuildIndexes">
            TCustomBufDataset.BuildIndexes
          </link>
          <link id="TCustomBufDataset.BuildCustomIndex">
            TCustomBufDataset.BuildCustomIndex
          </link>
          <link id="TCustomBufDataset.InternalCreateIndex">
            TCustomBufDataset.InternalCreateIndex
          </link>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TDBCompareStruct">TDBCompareStruct</link>
          <link id="IndexCompareRecords">IndexCompareRecords</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.BuildIndex.AIndex">
        <short>Index definition used in the method</short>
      </element>

      <element name="TCustomBufDataset.BuildIndexes">
        <short>
          Generates indexes using the index definitions for the dataset
        </short>
        <descr>
          <p>
            <var>BuildIndexes</var> is a procedure used to build the index storage for index definitions in the dataset. BuildIndexes uses the index definitions in BufIndexDefs to determine if the index storage must be rebuilt in the method. The default index (<var>'DEFAULT_ORDER'</var>) is always rebuilt. The custom index (<var>'CUSTOM_ORDER'</var>) is rebuilt only when it is the active index for the dataset.
          </p>
          <p>
            BuildIndexes calls BuildIndex using the corresponding value in BufIndex to rebuild the storage mechanism for the index.
          </p>
          <p>
            BuildIndexes is called from the IntLoadRecordsFromFile method.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndexDefs">TBufDatasetIndexDefs</link>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TCustomBufDataset.MaxIndexesCount">
            TCustomBufDataset.MaxIndexesCount
          </link>
          <link id="TCustomBufDataset.BufIndexDefs">
            TCustomBufDataset.BufIndexDefs
          </link>
          <link id="TCustomBufDataset.BufIndexes">
            TCustomBufDataset.BufIndexes
          </link>
          <link id="TCustomBufDataset.DefaultIndex">
            TCustomBufDataset.DefaultIndex
          </link>
          <link id="TCustomBufDataset.DefaultBufIndex">
            TCustomBufDataset.DefaultBufIndex
          </link>
          <link id="TCustomBufDataset.CurrentIndexDef">
            TCustomBufDataset.CurrentIndexDef
          </link>
          <link id="TCustomBufDataset.CurrentIndexBuf">
            TCustomBufDataset.CurrentIndexBuf
          </link>
          <link id="TCustomBufDataset.BuildIndex">
            TCustomBufDataset.BuildIndex
          </link>
          <link id="TCustomBufDataset.IntLoadRecordsFromFile">
            TCustomBufDataset.IntLoadRecordsFromFile
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.RemoveRecordFromIndexes">
        <short>
          Removes the record with the specified bookmark from the indexes for the dataset
        </short>
        <descr>
          <p>
            <var>RemoveRecordFromIndexes</var> is a procedure used to a remove the record with the Bookmark specified in ABookmark from all indexes in the dataset. RemoveRecordFromIndexes uses the BufIndexDefs property to visit each of the index definitions for the dataset, and calls the RemoveRecordFromIndex method in the corresponding BufIndex entry to remove the record with the specified Bookmark. The entry in BufIndex must be an active index; i.e. the index must be the current index and cannot be the custom index.
          </p>
          <p>
            RemoveRecordFromIndexes is called when a record is deleted from the dataset, or when an inserted or appended record has been cancelled.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">TCustomBufDataset.BufIndexDefs</link>
          <link id="TCustomBufDataset.BufIndex">TCustomBufDataset.BufIndex</link>
          <link id="#fcl.Db.TDataset.Delete">TDataset.Delete</link>
          <link id="#fcl.Db.TDataset.Cancel">TDataset.Cancel</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.RemoveRecordFromIndexes.ABookmark">
        <short>Bookmark for the record to remove from the indexes</short>
      </element>

      <element name="TCustomBufDataset.InternalCreateIndex">
        <short>
          Performs actions needed to create the storage for the specified index definition
        </short>
        <descr>
          <p>
            <var>InternalCreateIndex</var> is a procedure used to perform actions needed to create the storage for the index definition specified in F. InternalCreateIndex ensures that the dataset is open using its Active property, and that all data packets have been read for the dataset. When Refreshing contains <var>False</var>, the FetchAll method is called to apply pending data packets for the dataset.
          </p>
          <p>
            InternalCreateIndex creates a TBufIndex descendant that is used as the storage access mechanism for the index. When UniDirectional contains <var>True</var>, a TUniDirectionalBufIndex instance is used. Otherwise, a TDoubleLinkedBufIndex instance is created for the purpose. Methods in the TBufIndex descendant are used to initialize the index, and to set its properties to the values defined in the index definition. The index access mechanism is stored in F for subsequent use in the method.
          </p>
          <p>
            If the dataset is Active, the spare record in the index is initialized and the BuildIndex method is called to populate values in the storage for the index. The value in the MaxIndexesCount property is updated when necessary.
          </p>
          <p>
            InternalCreateIndex is called from the InitUserIndexes and InternalAddIndex methods.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.InternalCreateIndex.F">
        <short>Index definition for the new index</short>
      </element>

      <element name="TCustomBufDataset.CurrentIndexBuf">
        <short>
          Provides access to the storage for the current index in the dataset
        </short>
        <descr>
          <p>
            <var>CurrentIndexBuf</var> is a read-only <var>TBufIndex</var> property which provides access to the index storage mechanism for the current index in the dataset. The property value is derived in the read access specifier using the current index definition in CurrentIndexDef. The property value is <var>Nil</var> when the storage mechanism (BufferIndex) in the CurrentIndexDef property has not been assigned.
          </p>
          <p>
            The value in CurrentIndexBuf is used frequently in TCustomBufDataset in methods which perform record navigation. It is also used in read/write operations to an index storage mechanism when records are added, deleted, updated, or refreshed from their record buffers.
          </p>
        </descr>
      </element>

      <element name="TCustomBufDataset.CurrentIndexDef">
        <short>
          Provides access to the index definition for the current index in the dataset
        </short>
        <descr>
          <p>
            <var>CurrentIndexDef</var> is a read-only <var>TBufDatasetIndex</var> property which provides access to the index definition for the current index in the dataset. CurrentIndexDef contains properties that define the index, including:
          </p>
          <dl>
            <dt>Fields</dt>
            <dd>Field names included in the index</dd>
            <dt>CaseInsFields</dt>
            <dd>Case-insensitive fields in the index</dd>
            <dt>DescFields</dt>
            <dd>Descending fields in the index</dd>
            <dt>Options</dt>
            <dd>Options settings for the index</dd>
            <dt>Expression</dt>
            <dd>Expression used to create the index</dd>
            <dt>Source</dt>
            <dd>Persistent source where the index originated</dd>
            <dt>IndexType</dt>
            <dd>Type of index</dd>
          </dl>
          <p>
            CurrentIndexDef also includes methods used access and maintain the index storage in BufferIndex.
          </p>
          <p>
            CurrentIndexDef is used in several methods which open the dataset, build or activate indexes, and add or remove record values in the index.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">TCustomBufDataset.BufIndexDefs</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.BufIndexDefs">
        <short>
          Index definitions for the dataset
        </short>
        <descr>
          <p>
            <var>BufIndexDefs</var> is a read-only <var>TBufDatasetIndex</var> property which provides indexed access to index definitions for the buffered dataset. AIndex specifies the ordinal position for the desired index definition. Read access to the property value is redirected to an internal TBufDataSetIndexDefs member in the class.
          </p>
          <p>
            Use BufIndexDefs to access or modify existing indexes using the properties for the TBufDatasetIndex class instance, including:
          </p>
          <dl>
            <dt>Fields</dt>
            <dd>Field names included in the index</dd>
            <dt>CaseInsFields</dt>
            <dd>Case-insensitive fields in the index</dd>
            <dt>DescFields</dt>
            <dd>Descending fields in the index</dd>
            <dt>Options</dt>
            <dd>Options settings for the index</dd>
            <dt>Expression</dt>
            <dd>Expression used to create the index</dd>
            <dt>Source</dt>
            <dd>Persistent source where the index originated</dd>
            <dt>IndexType</dt>
            <dd>Type of index</dd>
          </dl>
          <p>
            Use the AddIndex method to add a new index definition to the dataset. Use BuildIndexes to recreate all indexes defined for the dataset. Use ClearIndexes to remove all index definitions for the dataset.
          </p>
          <p>
            Use BufIndexes to access the index storage mechanisms for the corresponding index definition.
          </p>
        </descr>
        <seealso>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
          <link id="TCustomBufDataset.BufIndexes">TCustomBufDataset.BufIndexes</link>
          <link id="TCustomBufDataset.AddIndex">TCustomBufDataset.AddIndex</link>
          <link id="TCustomBufDataset.BuildIndexes">TCustomBufDataset.BuildIndexes</link>
          <link id="TCustomBufDataset.ClearIndexes">TCustomBufDataset.ClearIndexes</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.BufIndexDefs.AIndex">
        <short>Ordinal position for the desired index definition</short>
      </element>

      <element name="TCustomBufDataset.BufIndexes">
        <short>
          Index storage mechanisms for indexes defined in the dataset
        </short>
        <descr>
          <p>
            <var>BufIndexes</var> is a read-only <var>TBufIndex</var> property that provides indexed access to the storage mechanisms for indexes defined in the dataset. AIndex specifies the ordinal position for the desired index storage mechanism. Read access to the property value is redirected to an internal TBufDataSetIndexDefs member in the class.
          </p>
          <p>
            Use BufIndexes to access existing indexes using the properties for the TBufIndex class instance. Use the BufIndexDefs property to modify existing index definitions, or the AddIndex method to create a new index definition. It should not be necessary to direct modify properties, or call methods in TBufIndex class instance. These actions are handled by the dataset.
          </p>
          <p>
            BufIndexes is used in methods which perform record navigation, add or delete records in the index, and read or write values for record buffers in the dataset.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">TCustomBufDataset.BufIndexDefs</link>
          <link id="TCustomBufDataset.AddIndex">TCustomBufDataset.AddIndex</link>
          <link id="TCustomBufDataset.ClearIndexes">TCustomBufDataset.ClearIndexes</link>
          <link id="TBufIndex">TBufIndex</link>
          <link id="TBufDataSetIndexDefs">TBufDataSetIndexDefs</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.BufIndexes.AIndex">
        <short>Ordinal position for the desired index storage mechanism</short>
      </element>

      <element name="TCustomBufDataset.SetPacketRecords" link="TCustomBufDataset.PacketRecords">
        <short>
          Sets the value for the PacketRecords property
        </short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetPacketRecords.aValue">
        <short>New value for the PacketRecords property</short>
      </element>

      <element name="TCustomBufDataset.SetRecNo" link="#fcl.Db.TDataset.RecNo">
        <short>
          Sets the value for the RecNo property
        </short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetRecNo.Value">
        <short>New value for the RecNo property</short>
      </element>

      <element name="TCustomBufDataset.GetRecNo" link="#fcl.Db.TDataset.RecNo">
        <short>Gets the value for the RecNo property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetRecNo.Result">
        <short>Value for the RecNo property</short>
      </element>

      <element name="TCustomBufDataset.GetChangeCount" link="TCustomBufDataset.ChangeCount">
        <short>Gets the value for the ChangeCount property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetChangeCount.Result">
        <short>Value for the ChangeCount property</short>
      </element>

      <element name="TCustomBufDataset.AllocRecordBuffer">
        <short>
          Allocates resources for a record buffer
        </short>
        <descr>
          <p>
            <var>AllocRecordBuffer</var> is an overridden <var>TRecordBuffer</var> function used to allocate resources needed for a record buffer in the dataset. AllocRecordBuffer implements the method defined in the ancestor class.
          </p>
          <p>
            AllocRecordBuffer calls AllocMem to reserve the memory used as the return value for the method. AllocRecordBuffer sets the record buffer size to the number of bytes determined by the RecordSize, BookmarkSize, and CalcFieldsSize properties. AllocRecordBuffer calls the InitRecord method to initialize the values in the new record buffer, including the NullMask for the record.
          </p>
        </descr>
        <seealso>
          <link id="TRecordBuffer">TRecordBuffer</link>
          <link id="TCustomBufDataset.RecordSize">
            TCustomBufDataset.RecordSize
          </link>
          <link id="TCustomBufDataset.BookmarkSize">
            TCustomBufDataset.BookmarkSize
          </link>
          <link id="TCustomBufDataset.CalcFieldsSize">
            TCustomBufDataset.CalcFieldsSize
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.AllocRecordBuffer.Result">
        <short>Record buffer allocated for the dataset</short>
      </element>

      <element name="TCustomBufDataset.FreeRecordBuffer">
        <short>
          Frees resources allocated for the specified record buffer
        </short>
        <descr>
          <p>
            <var>FreeRecordBuffer</var> is an overridden procedure used to free resources allocated to the record buffer in Buffer. FreeRecordBuffer calls ReAllocMem to set the length of memory reserved in Buffer to 0 (<var>zero</var>).
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.FreeRecordBuffer.Buffer">
        <short>Buffer with resources freed in the method</short>
      </element>

      <element name="TCustomBufDataset.ClearCalcFields">
        <short>Clears calculated fields in the specified record buffer</short>
        <descr>
          <p>
            <var>ClearCalcFields</var> is an overridden procedure used to clear calculated fields in the record buffer specified by Buffer. ClearCalcFields implements the method defined in the ancestor class. ClearCalcFields uses the value in CalcFieldsSize to determine the number of bytes written in the method. FillChar is called to store the value <var>#0</var> to the required number of bytes in Buffer at the offset specified by RecordSize.
          </p>
          <p>
            ClearCalcFields is used in the implementation of the CalculateFields and InitRecord methods.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.ClearCalcFields.Buffer">
        <short>Record buffer updated in the method</short>
      </element>

      <element name="TCustomBufDataset.InternalInitRecord">
        <short>
          Performs actions needed to initialize the buffer for a record in the dataset
        </short>
        <descr>
          <p>
            <var>InternalInitRecord</var> is an overridden procedure used to perform actions needed to initialize the record buffer specified in Buffer. InternalInitRecord implements the method defined in the ancestor class.
          </p>
          <p>
            InternalInitRecord calls FillChar to store the byte value <var>#0</var> to the number of bytes indicated in RecordSize. FillChar is also called to store the byte value <var>#255</var>  to the number of bytes indicated in NullMaskSize.
          </p>
          <p>
            InternalInitRecord is called from the InitRecord method.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.InternalInitRecord.Buffer">
        <short>Record buffer initialized in the method</short>
      </element>

      <element name="TCustomBufDataset.GetCanModify" link="TCustomBufDataset.CanModify">
        <short>Gets the value for the CanModify property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetCanModify.Result">
        <short>Value for the CanModify property</short>
      </element>

      <element name="TCustomBufDataset.GetRecord">
        <short>
          Gets the record buffer for the record at the specified relative position
        </short>
        <descr>
          <p>
            <var>GetRecord</var> is an overridden <var>TGetResult</var> function used to get the record buffer for the record at the position specified in GetMode. GetRecord implements the abstract method defined in the ancestor class.
          </p>
          <p>
            Buffer is the record buffer used to store the values for the requested record.
          </p>
          <p>
            GetMode indicates the relative position for the requested record, and can contain one of the values from the TGetMode enumeration.
          </p>
          <p>
            DoCheck indicates if an Exception should be raised when the return value is <var>grError</var>.
          </p>
          <p>
            The return value is a TGetResult value that indicates the result for the action performed in the method. The return value is <var>grOK</var> when the record buffer contains values for the record at the requested position.
          </p>
          <p>
            GetRecord uses the index storage in CurrentIndexBuf to determine if a record is available at the relative position requested in GetMode. When GetMode contains <var>gmPrior</var> or <var>gmNext</var>, methods in CurrentIndexDef are called to scroll to the desired record and set the return value for the method. The GetCurrent method in CurrentIndexBuf is called when GetMode contains <var>gmCurrent</var>.
          </p>
          <p>
            When the return value is <var>grOK</var>, the CurrentRecordToBuffer method is called to copy record values into the record buffer.
          </p>
          <p>
            When the dataset is Filtered, the values in Buffer are assigned to the FilterBuffer for the dataset. The dataset changes its State to <var>dsFilter</var> and calls the DoFilterRecord method to determine if the record meets the Filter condition. If the record does <b>not</b> meet the filter condition, the return value is set to <var>grError</var>. If the return value is not <var>grError</var>, the action is repeated until a record matching the filter condition is found.
          </p>
          <p>
            The return value is <var>grError</var> when no matching record is located in the dataset.
          </p>
          <p>
            GetRecord is used in the implementation of the GetNextRecord, GetPriorRecord, and Resync methods in TDataset.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TGetResult">
            TGetResult
          </link>
          <link id="TCustomBufDataset.Filtered">
            TCustomBufDataset.Filtered
          </link>
          <link id="TCustomBufDataset.DoFilterRecord">
            TCustomBufDataset.DoFilterRecord
          </link>
          <link id="TCustomBufDataset.OnFilterRecord">
            TCustomBufDataset.OnFilterRecord
          </link>
          <link id="#fcl.Db.TDataset.GetNextRecord">
              TDataset.GetNextRecord
          </link>
          <link id="#fcl.Db.TDataset.GetPriorRecord">
            TDataset.GetPriorRecord
          </link>
          <link id="#fcl.Db.TDataset.Resync">
            TDataset.Resync
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetRecord.Result">
        <short>Result for the operation</short>
      </element>
      <element name="TCustomBufDataset.GetRecord.Buffer">
        <short>Record buffer for the values from the dataset</short>
      </element>
      <element name="TCustomBufDataset.GetRecord.GetMode">
        <short>Relative position for the request</short>
      </element>
      <element name="TCustomBufDataset.GetRecord.DoCheck">
        <short>Indicates if an exception should be raised for error conditions</short>
      </element>

      <element name="TCustomBufDataset.GetRecordSize" link="TCustomBufDataset.RecordSize">
        <short>Gets the value for the RecordSize property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetRecordSize.Result">
        <short>Value for the RecordSize property</short>
      </element>

      <element name="TCustomBufDataset.DoBeforeClose" link="#fcl.Db.TDataset.DoBeforeClose">
        <short>
          Performs actions needed prior to closing the dataset
        </short>
        <descr>
          <p>
            <var>DoBeforeClose</var> is an overridden procedure used to perform actions needed prior to closing the dataset. DoBeforeClose calls the inherited method, and checks the value in the FileName property to determine if the dataset should be saved to a file on the local file system. When FileName is not an empty string (<b>''</b>), the SaveToFile method is called to store the dataset to the specified FileName.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FileName">TCustomBufDataset.FileName</link>
          <link id="TCustomBufDataset.SaveToFIle">TCustomBufDataset.SaveToFIle</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalInitFieldDefs"
        link="#fcl.Db.TDataset.InternalInitFieldDefs">
        <short>
          Performs actions needed to initialize field definitions for the dataset
        </short>
        <descr>
          <p>
            <var>InternalInitFieldDefs</var> is an overridden procedure used to perform actions needed to initialize field definitions for the dataset. InternalInitFieldDefs implements the abstract method defined in the ancestor class.
          </p>
          <p>
            InternalInitFieldDefs uses the value in the FileName property to determine if field definitions can be loaded from a file on the local file system. When FileName is <b>not</b> an empty string (<b>''</b>), the IntLoadFieldDefsFromFile is called to load the field definitions for the dataset. The internal data packet reader and the file stream used in the operation are freed after loading the field definitions for the specified file name.
          </p>
          <p>
            No actions are performed in the method when FileName contains an empty string (<b>''</b>).
          </p>
          <p>
            InternalInitFieldDefs is used in the implementation of the InitFieldDefs and OpenCursor methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FileName">TCustomBufDataset.FileName</link>
          <link id="TCustomBufDataset.InitFieldDefs">TCustomBufDataset.InitFieldDefs</link>
          <link id="#fcl.Db.TDataset.OpenCursor">TDataset.OpenCursor</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalOpen"
        link="#fcl.Db.TDataset.InternalOpen">
        <short>
          Performs actions needed to open the dataset
        </short>
        <descr>
          <p>
            <var>InternalOpen</var> is an overridden procedure used to perform actions needed when opening the dataset. InternalOpen implements the abstract method defined in the ancestor class.
          </p>
          <p>
            InternalOpen uses the FileName property (and the internal data packet reader) to determine if the dataset should be loaded from a file on the local file system. When the internal packet reader has been assigned and FileName is not an empty string (<b>''</b>), the IntLoadFieldDefsFromFile method is called to load the field definitions for the dataset from the specified file name.
          </p>
          <p>
            InternalOpen compares the sizes for the FieldDefs and Fields properties to determine if the dataset was successfully created from the specified file. If either property has a Count of 0 (<var>zero</var>), DatabaseError is called to raise an exception for the invalid dataset.
          </p>
          <p>
            Items in the Fields collection are checked to determine if an auto-increment field has been defined for the dataset. An auto-increment field is stored in an internal member used to provide quick access to the next value for the field.
          </p>
          <p>
            InternalOpen calls the InitDefaultIndexes and InitUserIndexes methods to initialize indexes used by the dataset. When IndexName is not an empty string (<b>''</b>), the indexes for the dataset are searched to locate the value in the property. If a matching index is found, it is assigned to the CurrentIndexDef property for the dataset. If IndexName is not assigned, the IndexFieldNames if examined to determine if the custom index should be built. When IndexFieldNames is not empty, the BuildCustomIndex method is called to create the custom index.
          </p>
          <p>
            InternalOpen calls the CalcRecordSize method to calculate the value for the RecordSize property. When RecordSize is known, the spare record used in each of the indexes is allocated and initialized. The ParseFilter method is called to parse the value in the Filter property.
          </p>
          <p>
            To finish opening the dataset, the internal data packet reader for the dataset is used to load record data by calling the IntLoadRecordsFromFile method. No record data is loaded if the internal data packet reader has not been assigned.
          </p>
          <p>
            InternalOpen is used in the implementation of the InternalRefresh, OpenCursor, and DoInternalOpen methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FileName">
            TCustomBufDataset.FileName
          </link>
          <link id="#fcl.Db.TDataset.FieldDefs">
            TDataset.FieldDefs
          </link>
          <link id="#fcl.Db.TDataset.Fields">
            TDataset.Fields
          </link>
          <link id="TCustomBufDataset.InitDefaultIndexes">
            TCustomBufDataset.InitDefaultIndexes
          </link>
          <link id="TCustomBufDataset.InitUserIndexes">
            TCustomBufDataset.InitUserIndexes
          </link>
          <link id="TCustomBufDataset.BuildCustomIndex">
            TCustomBufDataset.BuildCustomIndex
          </link>
          <link id="#fcl.Db.TDataset.Refresh">
            TDataset.Refresh
          </link>
          <link id="#fcl.Db.TDataset.OpenCursor">
            TDataset.OpenCursor
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalClose"
        link="#fcl.Db.TDataset.InternalClose">
        <short>
          Performs actions needed to close the dataset
        </short>
        <descr>
          <p>
            <var>InternalClose</var> is an overridden procedure used to perform actions needed when closing the dataset. InternalClose implements the abstract method defined in the ancestor class. InternalClose ensures that resources allocated for buffers in the dataset (including update buffers, and blob buffers) are freed.
          </p>
          <p>
            Buffers allocated as spare records in indexes are also released. Resources allocated to index storage mechanisms in BufIndexes are freed, and any indexes defined as temporal are discarded.
          </p>
          <p>
            InternalClose also frees the internal parser used to read the content for the buffered dataset (when it has been assigned).
          </p>
          <p>
            InternalClose is used in the implementation of the InternalRefresh and CloseCursor methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexes">
            TCustomBufDataset.BufIndexes
          </link>
          <link id="TCustomBufDataset.Refresh">
            TCustomBufDataset.Refresh
          </link>
          <link id="#fcl.Db.TDataset.CloseCursor">
            TDataset.CloseCursor
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalPost"
        link="#fcl.Db.TDataset.InternalPost">
        <short>
          Performs actions needed to post a record to the dataset
        </short>
        <descr>
          <p>
            <var>InternalPost</var> is an overridden procedure which perform actions needed to post a  record to the dataset. InternalPost calls the inherited method, which ensures that all required fields have a value. InternalPost checks for buffers allocated for updates to Blob fields in the record. Field number references in the the Blob update buffers are removed.
          </p>
          <p>
            InternalPost uses the value in the State property to determine if special actions are needed for an inserted record. When State contains <var>dsInsert</var>,  the next value for the AutoInc field in the dataset is determined (when present). The ActiveBuffer property contains the values used in field data for the new record. A record buffer is created for the new record by calling the IntAllocRecordBuffer method. A Bookmark for the record is created at the offset in RecordSize in the record buffer. A new record is added to each of the active indexes in BufIndexDefs at the position needed for the Bookmark and the content.in the record buffer.
          </p>
          <p>
            When State contains a value other than <var>dsInsert</var>, the InternalSetToRecord method is called to store the values in ActiveBuffer to the record in the dataset.
          </p>
          <p>
            InternalPost ensures that an update buffer is allocated for the record by calling GetActiveRecordUpdateBuffer. If it returns <var>False</var>, a new update buffer is created with the Bookmark to the record. When editing an existing record (State contains the value <var>dsEdit</var>), the UpdateKind in the update buffer is set to <var>ukModify</var> and a record buffer is allocated and set to the pre-editing values for the record. When State contains <var>dsInsert</var>, the UpdateKind value is set to <var>ukInsert</var> and pre-editing record buffer is cleared (set to <var>Nil</var>).
          </p>
          <p>
            When all modified values have been moved to the dataset record, the active indexes in BufIndexes call their OrderCurrentRecord method to reorder the index using  the values for the record.
          </p>
          <p>
            InternalPost is used in the implementation of the Post method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.State">TDataset.State</link>
          <link id="#fcl.Db.TUpdateKind">TUpdateKind</link>
          <link id="TCustomBufDataset.ActiveBuffer">TCustomBufDataset.ActiveBuffer</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalCancel"
        link="#fcl.Db.TDataset.InternalCancel">
        <short>
          Performs actions needed to cancel a pending update in the dataset
        </short>
        <descr>
          <p>
            <var>InternalCancel</var> is an overridden procedure used to perform actions needed to cancel a pending update in the dataset. InternalCancel implements the method defined in the ancestor class.
          </p>
          <p>
            InternalCancel checks for allocated update buffers in the dataset. When update buffers have been assigned, field references in the buffers are removed and memory allocated for the update buffers is freed.
          </p>
          <p>
            InternalCancel is used in the implementation of the Cancel method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Cancel">TDataset.Cancel</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalDelete"
        link="#fcl.Db.TDataset.InternalDelete">
        <short>
          Performs actions needed to delete the current record in the dataset
        </short>
        <descr>
          <p>
            <var>InternalDelete</var> is an overridden procedure used to perform actions needed to delete the current record in the dataset. InternalDelete implements the method defined in the ancestor class.
          </p>
          <p>
            InternalDelete ensures that the dataset is positioned on the record represented by the values in the ActiveBuffer property. A Bookmark for the record is used to remove the record from all of the active indexes in the dataset. InternalDelete ensures that an update buffer is allocated for the modified record using the value ukDelete in its UpdateKind property. Memory is not allocated for the pre-editing record buffer; it is not needed for delete operations. Memory allocated for the record update buffer is retained to allow restoring the record when the CancelUpdates method is called.
          </p>
          <p>
            InternalDelete is used in the implementation of the Delete method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Delete">TDataset.Delete</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalFirst"
        link="#fcl.Db.TDataset.InternalFirst">
        <short>
          Performs actions needed to move to the first record in the dataset
        </short>
        <descr>
          <p>
            <var>InternalFirst</var> is an overridden procedure used to perform actions needed to move to the first record in the dataset. InternalFirst implements the method defined in the ancestor class.
          </p>
          <p>
            InternalFirst uses the active index in CurrentIndexBuf to navigate to the first record for the selected index order.
          </p>
          <p>
            InternalFirst is used in the implementation of the First and SetCurrentRecord methods.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.First">
            TDataset.First
          </link>
          <link id="TCustomBufDataset.SetCurrentRecord">
            TCustomBufDataset.SetCurrentRecord
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalLast"
        link="#fcl.Db.TDataset.InternalLast">
        <short>
          Performs actions needed to move to the last record in the dataset
        </short>
        <descr>
          <p>
            <var>InternalLast</var> is an overridden procedure used to perform actions needed to move to the last record in the dataset. InternalLast implements the method defined in the ancestor class.
          </p>
          <p>
            InternalLast calls FetchAll to ensure that any pending data packets have been applied to the dataset. InternalLast uses the active index in CurrentIndexBuf to navigate to the last record for the selected index order.
          </p>
          <p>
            InternalLast is used in the implementation of the Last, SetCurrentRecord, and DoInsertAppend methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FetchAll">
            TCustomBufDataset.FetchAll
          </link>
          <link id="TCustomBufDataset.CurrentIndexBuf">
            TCustomBufDataset.CurrentIndexBuf
          </link>
          <link id="TCustomBufDataset.SetCurrentRecord">
            TCustomBufDataset.SetCurrentRecord
          </link>
          <link id="TCustomBufDataset.DoInsertAppend">
            TCustomBufDataset.DoInsertAppend
          </link>
          <link id="#fcl.Db.TDataset.Last">
            TDataset.Last
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalSetToRecord"
        link="#fcl.Db.TDataset.InternalSetToRecord">
        <short>
          Moves the dataset to the specified record buffer
        </short>
        <descr>
          <p>
            <var>InternalSetToRecord</var> is an overridden procedure used to move the dataset to the record buffer specified in Buffer. InternalSetToRecord implements the method defined in the ancestor class.
          </p>
          <p>
            Buffer is a TRecordBuffer instance which contains the data and the bookmark for the desired record. The Bookmark is retrieved from Buffer and used to navigate the dataset to the record in the current index using its GotoBookmark method.
          </p>
          <p>
            InternalSetToRecord is used in the implementation of the SetCurrentRecord and InternalDelete methods.
          </p>
        </descr>
        <seealso>
          <link id="TRecordBuffer">
            TRecordBuffer
          </link>
          <link id="TCustomBufDataset.SetCurrentRecord">
            TCustomBufDataset.SetCurrentRecord
          </link>
          <link id="TCustomBufDataset.InternalDelete">
            TCustomBufDataset.InternalDelete
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.InternalSetToRecord.Buffer">
        <short>Record buffer with values to locate in the dataset</short>
      </element>

      <element name="TCustomBufDataset.InternalGotoBookmark"
        link="#fcl.Db.TDataset.InternalGotoBookmark">
        <short>
          Performs actions needed to move to the specified Bookmark in the dataset
        </short>
        <descr>
          <p>
            <var>InternalGotoBookmark</var> is an overridden procedure used to perform actions needed to move to the specified Bookmark in the dataset. InternalGotoBookmark implements the method defined in the ancestor class.
          </p>
          <p>
            InternalGotoBookmark uses the current active index in the CurrentIndexBuf property to navigate to the bookmark by calling its GotoBookmark method. ABookmark is a pointer with the bookmark value to locate in the index.
          </p>
          <p>
            InternalGotoBookmark is used in the implementation of the GotoBookmark method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.GotoBookmark">TCustomBufDataset.GotoBookmark</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.InternalGotoBookmark.ABookmark">
        <short>Bookmark to locate in the current index</short>
      </element>

      <element name="TCustomBufDataset.SetBookmarkData"
        link="#fcl.Db.TDataset.SetBookmarkData">
        <short>
          Stores the specified Bookmark data to a record buffer
        </short>
        <descr>
          <p>
            <var>SetBookmarkData</var> is an overridden procedure used to store the specified Bookmark data to the record buffer in Buffer. SetBookmarkData implements the method defined in the ancestor class.
          </p>
          <p>
            Buffer is a TRecordBuffer instance where the bookmark data will be stored. Data is a Pointer with the value for the bookmark data. The pointer in Data is cast to PBufBookmark and stored in Buffer at the offset indicated by the RecordSize property. SetBookmarkData is used in the implementation of the DoInsertAppend method.
          </p>
        </descr>
        <seealso>
          <link id="TRecordBuffer">TRecordBuffer</link>
          <link id="PBufBookmark">PBufBookmark</link>
          <link id="TCustomBufDataset.RecordSize">
            TCustomBufDataset.RecordSize
          </link>
          <link id="TCustomBufDataset.DoInsertAppend">
            TCustomBufDataset.DoInsertAppend
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.SetBookmarkData.Buffer">
        <short>Record buffer used to store the bookmark data`</short>
      </element>
      <element name="TCustomBufDataset.SetBookmarkData.Data">
        <short>Pointer to the Bookmark data stored in the record buffer</short>
      </element>

      <element name="TCustomBufDataset.SetBookmarkFlag"
        link="#fcl.Db.TDataset.SetBookmarkFlag">
        <short>
          Stores the specified Bookmark flag value to a record buffer
        </short>
        <descr>
          <p>
            <var>SetBookmarkFlag</var> is an overridden procedure used to store the specified Bookmark flag value to the record buffer in Buffer. SetBookmarkFlag implements the method defined in the ancestor class.
          </p>
          <p>
            Buffer is a TRecordBuffer instance where the Bookmark flag value will be stored. Value is a TBookmarkFlag instance with the value for the Bookmark flag.
          </p>
          <p>
            The bookmark flag in Value is stored in Buffer at the offset indicated by the RecordSize property. SetBookmarkFlag is used in the implementation of the DoInsertAppend method.
          </p>
        </descr>
        <seealso>
          <link id="TRecordBuffer">
            TRecordBuffer
          </link>
          <link id="TCustomBufDataset.RecordSize">
            TCustomBufDataset.RecordSize
          </link>
          <link id="TCustomBufDataset.DoInsertAppend">
            TCustomBufDataset.DoInsertAppend
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.SetBookmarkFlag.Buffer">
        <short>Record buffer where the bookmark flag is stored</short>
      </element>
      <element name="TCustomBufDataset.SetBookmarkFlag.Value">
        <short>Bookmark flag data to store in the record buffer</short>
      </element>

      <element name="TCustomBufDataset.GetBookmarkData"
        link="#fcl.Db.TDataset.GetBookmarkData">
        <short>
          Gets bookmark data from the specified record buffer
        </short>
        <descr>
          <p>
            <var>GetBookmarkData</var> is an overridden procedure used to get bookmark data from the record buffer in Buffer and store the value to the pointer in Data. GetBookmarkData implements the method defined in the ancestor class.
          </p>
          <p>
            GetBookmarkData casts the value in Buffer to a PBufBookmark type starting at the byte offset in RecordSize. The pointer is stored in the Data argument for subsequent use in calling methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.RecordSize">
            TCustomBufDataset.RecordSize
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetBookmarkData.Buffer">
        <short>Record buffer with the bookmark data copied in the method</short>
      </element>
      <element name="TCustomBufDataset.GetBookmarkData.Data">
        <short>Pointer to the bookmark data in the record buffer</short>
      </element>

      <element name="TCustomBufDataset.GetBookmarkFlag"
        link="#fcl.Db.TDataset.GetBookmarkFlag">
        <short>
          Gets Bookmark flag data from the specified record buffer
        </short>
        <descr>
          <p>
            <var>GetBookmarkFlag</var> is an overridden <var>TBookmarkFlag</var> function used to get Bookmark flag data from the record buffer specified in <var>Buffer</var>. GetBookmarkFlag re-implements the method defined in the ancestor class. GetBookmarkFlag casts the value in Buffer to PBufBookmark, and uses its BookmarkFlag property as the return value for the method.
          </p>
          <p>
            The return value is set to <var>bfCurrent</var> when record data is copied to the current record. It may contain the value <var>bfBOF</var> or <var>bfEOF</var> when the record is at the beginning or end of the current index order. The value <var>bfInserted</var> indicates the record was appended or inserted.
          </p>
          <p>
            GetBookmarkFlag is used in the implementation of the BookmarkAvailable and SetCurrentRecord methods.
          </p>
        </descr>
        <seealso>
          <link id="TBookmarkFlag">
          </link>
          <link id="TCustomBufDataset.BookmarkAvailable">
            TCustomBufDataset.BookmarkAvailable
          </link>
          <link id="TCustomBufDataset.SetCurrentRecord">
            TCustomBufDataset.SetCurrentRecord
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetBookmarkFlag.Result">
        <short>Bookmark flag data copied from the record buffer</short>
      </element>
      <element name="TCustomBufDataset.GetBookmarkFlag.Buffer">
        <short>Record buffer with the bookmark flag value</short>
      </element>

      <element name="TCustomBufDataset.IsCursorOpen"
        link="#fcl.Db.TDataset.IsCursorOpen">
        <short>
          Indicates if the cursor for the dataset has been opened
        </short>
        <descr>
          <p>
            <var>IsCursorOpen</var> is an overridden <var>Boolean</var> function which indicates if the cursor for the dataset has been opened. IsCursorOpen implements the method defined in the ancestor class.
          </p>
          <p>
            The ancestor class uses the cursor concept to indicate that field definitions (and the fields bound to those definitions) have already been established  for the dataset. In TCustomBufDataset (and descendent classes) this means that the InternalOpen method has been called. The return value is <var>True</var> when InternalOpen has been called. The return value is <var>False</var> when InternalClose has been called.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.FieldDefs">TDataset.FieldDefs</link>
          <link id="#fcl.Db.TDataset.Fields">TDataset.Fields</link>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
          <link id="#fcl.Db.TDataset.Open">TDataset.Open</link>
          <link id="#fcl.Db.TDataset.Close">TDataset.Close</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.IsCursorOpen.Result">
        <short>True if the cursor has been opened</short>
      </element>

      <element name="TCustomBufDataset.GetRecordCount" link="#fcl.Db.TDataset.RecordCount">
        <short>Gets the value for the RecordCount property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetRecordCount.Result">
        <short>Value for the RecordCount property</short>
      </element>

      <element name="TCustomBufDataset.ApplyRecUpdate">
        <short>
          Raises an exception. ApplyRecUpdate is not supported in TCustomBufDataset and descendent classes.
        </short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.ApplyRecUpdate.UpdateKind">
        <short>Update kind to handle in the method</short>
      </element>

      <element name="TCustomBufDataset.SetOnUpdateError" link="TCustomBufDataset.OnUpdateError">
        <short>Sets the value for the OnUpdateError property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetOnUpdateError.AValue">
        <short>New value for the OnUpdateError property</short>
      </element>

      <element name="TCustomBufDataset.SetFilterText" link="#fcl.Db.TDataset.Filter">
        <short>Sets the value in the Filter property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetFilterText.Value">
        <short>New value for the Filter property</short>
      </element>

      <element name="TCustomBufDataset.SetFiltered" link="#fcl.Db.TDataset.Filtered">
        <short>Sets the value in the Filtered property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetFiltered.Value">
        <short>New value for the Filtered property</short>
      </element>

      <element name="TCustomBufDataset.DataEvent" link="#fcl.Db.TDataSet.DataEvent">
        <short>
          Triggers an event when the dataset or its data is modified
        </short>
        <descr>
          <p>
            <var>DataEvent</var> is an overridden procedure used to trigger an event when the dataset or its data is modified. DataEvent provides support for filtering out temporary state change notifications when Event contains the value deUpdateState. DataEvent calls the inherited DataEvent method for dataset state change, dataset scrolling, field change, and layout change notifications.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.DataEvent">TDataset.DataEvent</link>
          <link id="#fcl.Db.TDataEvent">TDataEvent</link>
          <link id="#fcl.Db.TField">TField</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.DataEvent.Event">
        <short>Data event type for the notification</short>
      </element>
      <element name="TCustomBufDataset.DataEvent.Info">
        <short>Pointer to the field for the notification</short>
      </element>

      <element name="TCustomBufDataset.GetNewBlobBuffer">
        <short>
          Creates a new Blob buffer and adds it to the internal Blob buffers member
        </short>
        <descr>
          <p>
            <var>GetNewBlobBuffer</var> is a <var>PBlobBuffer</var> function used to create a new Blob buffer, and to add it to the internal member used for Blob buffers in the dataset. The return value is a PBlobBuffer type that is a pointer to the memory allocated for the blob buffer. The return value is filled with the value <var>#0</var> using the number of bytes required for the blob buffer.
          </p>
          <p>
            GetNewBlobBuffer is used in the implementation of the Create and LoadBuffer methods, and in the RestoreBlobField method in TDataPacketReader.
          </p>
        </descr>
        <seealso>
          <link id="PBlobBuffer">
            PBlobBuffer
          </link>
          <link id="TCustomBufDataset.Create">
            TCustomBufDataset.Create
          </link>
          <link id="TCustomBufDataset.LoadBuffer">
            TCustomBufDataset.LoadBuffer
          </link>
          <link id="TDataPacketReader.RestoreBlobField">
            TDataPacketReader.RestoreBlobField
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetNewBlobBuffer.Result">
        <short>Pointer to the memory allocated for the blob buffer</short>
      </element>

      <element name="TCustomBufDataset.GetNewWriteBlobBuffer">
        <short>
          Creates a new Blob update buffer and adds it to the internal list
        </short>
        <descr>
          <p>
            <var>GetNewWriteBlobBuffer</var> is a <var>PBlobBuffer</var> function used to create a new Blob update buffer, and to add it to the internal member used for Blob update buffers in the dataset. The return value is a PBlobBuffer type that is a pointer to the memory allocated for the blob buffer. The return value is filled with the value <var>#0</var> using the number of bytes required for the blob buffer.
          </p>
          <p>
            GetNewWriteBlobBuffer is very similar to GetNewBlobBuffer in operation, but does not set the value in the Origin Buffer ID for the PBlobBuffer  pointer.
          </p>
          <p>
            GetNewWriteBlobBuffer is used in the implementation of the Create method.
          </p>
        </descr>
        <seealso>
          <link id="PBlobBuffer">
            PBlobBuffer
          </link>
          <link id="TCustomBufDataset.Create">
            TCustomBufDataset.Create
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetNewWriteBlobBuffer.Result">
        <short>Pointer to the memory allocated for the blob buffer</short>
      </element>

      <element name="TCustomBufDataset.FreeBlobBuffer">
        <short>
          Frees resources allocated to the specified Blob buffer
        </short>
        <descr>
          <p>
            <var>FreeBlobBuffer</var> is a procedure used to free resources allocated to the Blob buffer specified in ABlobBuffer. No actions are performed in the  method when ABlobBuffer has not been assigned (contains <var>Nil</var>).
          </p>
          <p>
            FreeBlobBuffer calls FreeMem to free memory allocated to the Blob buffer using the Size stored in the buffer, and the pointer is released and set to <var>Nil</var>.
          </p>
          <p>
            FreeBlobBuffer is called from the InternalClose, InternalCancel, and  MergeChangeLog methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.InternalClose">
            TCustomBufDataset.InternalClose
          </link>
          <link id="TCustomBufDataset.InternalCancel">
            TCustomBufDataset.InternalCancel
          </link>
          <link id="TCustomBufDataset.MergeChangeLog">
            TCustomBufDataset.MergeChangeLog
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.FreeBlobBuffer.ABlobBuffer">
        <short>Blob buffer freed in the method</short>
      </element>

      <element name="TCustomBufDataset.InternalRefresh"
        link="#fcl.Db.TDataset.InternalRefresh">
        <short>
          Performs actions needed to refresh records in the dataset
        </short>
        <descr>
          <p>
            <var>InternalRefresh</var> is an overridden procedure used to perform actions needed to refresh the records in the buffered dataset. InternalRefresh implements the method defined in the ancestor class. InternalRefresh ensures that no update buffers have been allocated for records in the dataset. If any update buffers exist, an exception is raised by calling DatabaseError.
          </p>
          <p>
            InternalRefresh sets the value in the Refreshing property to <var>True</var>, and resets the value prior to exiting from the method. InternalRefresh sets the value in the DefaultFields property to <var>False</var> to prevent automatic field creation when the dataset is refreshed. The property  is restored to its previous value when the refresh process is completed.
          </p>
          <p>
            InternalRefresh calls FreeFieldBuffers to free any buffers allocated for fields in the dataset. ClearBuffers is called to clear values in the ActiveRecord, CurrentRecord, and RecordCount properties. Internal flags are also set to indicate that no data is present in the dataset. The content in the dataset is reloaded by calling the InternalClose and InternalOpen methods.
          </p>
          <p>
            InternalRefresh is used in the implementation of the Refresh method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Refresh">TDataset.Refresh</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.InternalAddIndex">
        <short>
          Performs actions needed to add an index to the dataset
        </short>
        <descr>
          <p>
            <var>InternalAddIndex</var> is a <var>TBufDatasetIndex</var> function used to perform actions needed to add an index to the dataset. InternalAddIndex adds a TBufDatasetIndex instance to the internal member used for indexes defined in the dataset. Arguments passed to the method are assigned to the corresponding properties in the TBufDatasetIndex instance.
          </p>
          <p>
            InternalAddIndex calls the InternalCreateIndex method using the return value as an argument.
          </p>
          <p>
            InternalAddIndex is used in the implementation of the AddIndex and InitDefaultIndexes methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.AddIndex">
            TCustomBufDataset.AddIndex
          </link>
          <link id="TCustomBufDataset.InitDefaultIndexes">
            TCustomBufDataset.InitDefaultIndexes
          </link>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.Result">
        <short>Index added to the dataset</short>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.AName">
        <short>Name for the index</short>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.AFields">
        <short>Fields included in the index</short>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.AOptions">
        <short>Options for the index</short>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.ADescFields">
        <short>Descending fields in the index</short>
      </element>
      <element name="TCustomBufDataset.InternalAddIndex.ACaseInsFields">
        <short>Case-insensitive fields in the index</short>
      </element>

      <element name="TCustomBufDataset.BeforeRefreshOpenCursor">
        <short>An empty implementation in TCustomBufDataset</short>
        <descr></descr>
      </element>

      <element name="TCustomBufDataset.DoFilterRecord">
        <short>
          Performs actions needed to filter records in the dataset
        </short>
        <descr>
          <p>
            <var>DoFilterRecord</var> is a procedure used to perform actions needed to filter records in the buffered dataset.  DoFilterRecord signals the OnFilterRecord event handler when it has been assigned in the class instance. OnFilterRecord allows the application to determine record visibility using the criteria defined in the event handler. The <var>Acceptable</var> parameter is updated in the event handler to indicate if the record matches the criteria.
          </p>
          <p>
            DoFilterRecord also uses the value in the Filter property (when assigned) to determine if the current record matches the filter condition. When Acceptable contains <var>True</var> (the default value), the internal Parser is used to extract the contents of the current record buffer.
          </p>
          <p>
            DoFilterRecord is called from the GetRecord and Locate methods when the Filtered property contains <var>True</var>.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Filter">TDataset.Filter</link>
          <link id="#fcl.Db.TDataset.Filtered">TDataset.Filtered</link>
          <link id="TCustomBufDataset.GetRecord">
            TCustomBufDataset.GetRecord
          </link>
          <link id="TCustomBufDataset.Locate">
            TCustomBufDataset.Locate
          </link>
          <link id="TCustomBufDataset.OnFilterRecord">
            TCustomBufDataset.OnFilterRecord
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.DoFilterRecord.Acceptable">
        <short>Indicates if a record matches the Filter for the dataset</short>
      </element>

      <element name="TCustomBufDataset.SetReadOnly" link="TCustomBufDataset.ReadOnly">
        <short>Sets the value in the ReadOnly property</short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetReadOnly.AValue">
        <short>New value for the ReadOnly property</short>
      </element>

      <element name="TCustomBufDataset.IsReadFromPacket">
        <short>
          Indicates if dataset content was read from a data packet reader or file
        </short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.IsReadFromPacket.Result">
        <short>True when a data packet reader and file name exist for the dataset</short>
      </element>

      <element name="TCustomBufDataset.GetNextPacket">
        <short>
          Reads and applies the next data packet from the data packet reader
        </short>
        <descr>
          <p>
          <var>GetNextPacket</var> is an <var>Integer</var> function used to read the next available packet using the data packet reader for the dataset. A data packet can contain record buffers (up to the number specified in PacketRecords). The return value contains the number of record buffers read using the LoadBuffer method. The return value is <var>0</var> (<var>zero</var>) if no packet records are available for the dataset.
          </p>
          <p>
            GetNextPacket uses the default index for the dataset (DefaultBufferIndex) to include record buffers in the index for the dataset. Its AddRecord method is called to include the record buffer in the default index.
          </p>
          <p>
            GetNextPacket is used in the implementation of the FetchAll, Locate, GetRecord and GetDatasetPacket methods, and when setting the value in the RecNo property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.PacketRecords">
            TCustomBufDataset.PacketRecords
          </link>
          <link id="TCustomBufDataset.FetchAll">
            TCustomBufDataset.FetchAll
          </link>
          <link id="TCustomBufDataset.GetRecord">
          TCustomBufDataset.GetRecord
        </link>
          <link id="TCustomBufDataset.GetDatasetPacket">
            TCustomBufDataset.GetDatasetPacket
          </link>
          <link id="TCustomBufDataset.Locate">
            TCustomBufDataset.Locate
          </link>
          <link id="TCustomBufDataset.RecNo">
            TCustomBufDataset.RecNo
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetNextPacket.Result">
        <short>Number of record buffers processed in the data packet</short>
      </element>

      <element name="TCustomBufDataset.GetPacketReader">
        <short>
          Gets a Data Packet Reader using the specified data format for the dataset
        </short>
        <descr>
          <p>
            <var>GetPacketReader</var> is a <var>TDataPacketReader</var> function used to get the data packet reader needed for the specified data packet format. Format is TDataPacketFormat enumeration value that indicates the format used when reading data packets. AStream is a TStream descendant with the values read using the data packet reader.
          </p>
          <p>
            GetPacketReader checks for a TDataPacketReaderClass type which uses the specified data packet format. The class type is registered using the RegisterDatapacketReader procedure. If a match is found, the return value is set to the instantiated class type. If no match is found, the TFpcBinaryDatapacketReader class is used to examine the values in the AStream argument. If the data packets are in binary format, the class is instantiated and assigned as the return value for the method. An exception is raised if no data packet reader is found for the specified format.
          </p>
          <p>
            GetPacketReader is used in the implementation of the LoadFromStream and IntLoadFieldDefsFromFile methods.
          </p>
        </descr>
        <seealso>
          <link id="TDataPacketReader">TDataPacketReader</link>
          <link id="TCustomBufDataset.LoadFromStream">
            TCustomBufDataset.LoadFromStream
          </link>
          <link id="TCustomBufDataset.IntLoadFieldDefsFromFile">
            TCustomBufDataset.IntLoadFieldDefsFromFile
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetPacketReader.Result">
        <short>Data packet reader for the specified format</short>
      </element>
      <element name="TCustomBufDataset.GetPacketReader.Format">
        <short>Data packet format for the desired packet reader</short>
      </element>
      <element name="TCustomBufDataset.GetPacketReader.AStream">
        <short>Stream with content to examine in the method</short>
      </element>

      <element name="TCustomBufDataset.Fetch">
        <short>
          An empty implementation in TCustomBufDataset
        </short>
        <descr>
          <p>
            <var>Fetch</var> is a <var>Boolean</var> function. Fetch is essentially an empty implementation which ensures that TCustomBufDataset and descendants can be used as an in-memory dataset. Fetch always returns <var>False</var>.
          </p>
        </descr>
      </element>
      <element name="TCustomBufDataset.Fetch.Result">
        <short>Always returns False</short>
      </element>

      <element name="TCustomBufDataset.LoadField">
        <short>
          An empty implementation in TCustomBufDataset
        </short>
        <descr>
          <p>
            <var>LoadField</var> is an empty method which makes it possible to use TCustomBufDataset as an in-memory dataset. LoadField sets the value in CreateBlob to <var>False</var>. The return value for the method is always <var>False</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.LoadBuffer">TCustomBufDataset.LoadBuffer</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.LoadField.Result">
        <short>Always returns False</short>
      </element>
      <element name="TCustomBufDataset.LoadField.FieldDef">
        <short>Field definition for the field loaded in the method</short>
      </element>
      <element name="TCustomBufDataset.LoadField.Buffer">
        <short>Buffer with values for the field</short>
      </element>
      <element name="TCustomBufDataset.LoadField.CreateBlob">
        <short>Indicates if Blobs fields are included in the method</short>
      </element>

      <element name="TCustomBufDataset.LoadBlobIntoBuffer">
        <short>
          Loads a Blob buffer for the specified field into the current record buffer
        </short>
        <descr>
        </descr>
      </element>
      <element name="TCustomBufDataset.LoadBlobIntoBuffer.FieldDef">
        <short>Field definition for the Blob field</short>
      </element>
      <element name="TCustomBufDataset.LoadBlobIntoBuffer.ABlobBuf">
        <short>Blob buffer loaded in the method</short>
      </element>

      <element name="TCustomBufDataset.Refreshing">
        <short>
          Indicates if the Refresh method has been called but has not completed
        </short>
        <descr>
          <p>
            <var>Refreshing</var> is a read-only Boolean property that indicates if the <var>Refresh</var> method has been called but has not completed. The value in Refreshing is updated in the InternalRefresh method, and contains <var>True</var> while the method is active. It is reset to <var>False</var> when the method has finished refreshing records in the dataset. Refreshing is used primarily to ensure that all record data has been read prior to creating indexes for the dataset.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Refresh">
            TDataset.Refresh
          </link>
          <link id="TCustomBufDataset.InternalRefresh">
            TCustomBufDataset.InternalRefresh
          </link>
        </seealso>
      </element>

      <!-- visibility: public -->
      <element name="TCustomBufDataset.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          <p>
            <var>Create</var> is an overridden constructor for the class instance. Create calls the inherited constructor using the value in AOwner as the owner of the class instance. Create sets the default value for internal members used in the implementation of the buffered dataset, including:
          </p>
          <ul>
            <li>Parser for data packets (<var>Nil</var>)</li>
            <li>Manual MergeChangeLog handling (<b>False</b>)</li>
            <li>Default AutoInc field value (<b>-1</b>)</li>
            <li>Update Buffer count (<b>0</b>)</li>
            <li>Blob Buffer count (<b>0</b>)</li>
            <li>Blob Update Buffer count (<b>0</b>)</li>
          </ul>
          <p>
            Creates sets the value for public and published properties, including:
          </p>
          <ul>
            <li>MaxIndexesCount (<b>2</b>)</li>
            <li>PacketRecords (<b>10</b>)</li>
          </ul>
          <p>
            Create allocates resources needed for the BufIndexdefs and BufIndexes properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">
            TCustomBufDataset.BufIndexDefs
          </link>
          <link id="TCustomBufDataset.BufIndexes">
            TCustomBufDataset.BufIndexes
          </link>
          <link id="TCustomBufDataset.MaxIndexesCount">
            TCustomBufDataset.MaxIndexesCount
          </link>
          <link id="TCustomBufDataset.PacketRecords">
            TCustomBufDataset.PacketRecords
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomBufDataset.GetFieldData"
        link="#fcl.Db.TDataset.GetFieldData">
        <short></short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.GetFieldData.Result"
        link="#fcl.Db.TDataset.GetFieldData.Result">
        <short></short>
      </element>
      <element name="TCustomBufDataset.GetFieldData.Field" link="#fcl.Db.TDataset.GetFieldData.Field">
        <short></short>
      </element>
      <element name="TCustomBufDataset.GetFieldData.Buffer" link="#fcl.Db.TDataset.GetFieldData.Buffer">
        <short></short>
      </element>
      <element name="TCustomBufDataset.GetFieldData.NativeFormat" link="#fcl.Db.TDataset.GetFieldData.NativeFormat">
        <short></short>
      </element>

      <element name="TCustomBufDataset.SetFieldData"
        link="#fcl.Db.TDataset.SetFieldData">
        <short></short>
        <descr></descr>
      </element>
      <element name="TCustomBufDataset.SetFieldData.Field" link="#fcl.Db.TDataset.SetFieldData.Field">
        <short></short>
      </element>
      <element name="TCustomBufDataset.SetFieldData.Buffer" link="#fcl.Db.TDataset.SetFieldData.Buffer">
        <short></short>
      </element>
      <element name="TCustomBufDataset.SetFieldData.NativeFormat"
        link="#fcl.Db.TDataset.SetFieldData.NativeFormat">
        <short></short>
      </element>

      <element name="TCustomBufDataset.ApplyUpdates">
        <short>
          Applies pending updates to the dataset
        </short>
        <descr>
          <p>
            <var>ApplyUpdates</var> is an overloaded procedure used to apply pending updates for the dataset.
          </p>
          <p>
            ApplyUpdates calls CheckBrowseMode and gets a bookmark for the current record in the dataset. The bookmark is used to return the dataset its original record after updates are applied and the dataset has been refreshed.
          </p>
          <p>
            MaxErrors is the threshold where errors encountered in the process cause it to be aborted. The value <var>0</var> (<var>zero</var>) indicates no errors are allowed during the apply updates process.
          </p>
          <p>
            ApplyUpdates uses the internal update buffers allocated for the dataset to perform the actions required in the method. The ApplyRecUpdate method is called for each of the update buffers. An exception raised in ApplyRecUpdate is handled in the method. When the value in MaxErrors is exceeded, the process is aborted. Otherwise, the update buffer is skipped. If the OnUpdateError exception handler has been assigned, it is signalled using the required arguments and its Response value is captured in the method. If the process is to be aborted, an exception is raised to indicate the condition.
          </p>
          <p>
            When an update buffer is successfully applied, resources allocated to its  OldValuesBuffer, Bookmark data, and the update buffer itself are freed. If all pending updates are applied successfully, and ManualMergeChangeLog contains <var>False</var>, the MergeChangeLog method is called.
          </p>
          <p>
            ApplyUpdates calls Resync to fresh the records displayed in the dataset prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.CheckBrowseMode">
            TDataset.CheckBrowseMode
          </link>
          <link id="TRecUpdateBuffer">
            TRecUpdateBuffer
          </link>
          <link id="TCustomBufDataset.ApplyRecUpdate">
            TCustomBufDataset.ApplyRecUpdate
          </link>
          <link id="TCustomBufDataset.OnUpdateError">
            TCustomBufDataset.OnUpdateError
          </link>
          <link id="TCustomBufDataset.ManualMergeChangeLog">
            TCustomBufDataset.ManualMergeChangeLog
          </link>
          <link id="TCustomBufDataset.MergeChangeLog">
            TCustomBufDataset.MergeChangeLog
          </link>
          <link id="#fcl.Db.TDataset.Resync">
            TDataset.Resync
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.ApplyUpdates.MaxErrors">
        <short>Maximum number of errors allowed before cancelling the operation</short>
      </element>

      <element name="TCustomBufDataset.MergeChangeLog">
        <short>
          Frees update buffers and Blob update buffer allocated for the dataset
        </short>
        <descr>
          <p>
            <var>MergeChangeLog</var> is a procedure used to free update buffers and Blob update buffer allocated for the dataset. MergeChangeLog is called from the ApplyUpdates method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.ApplyUpdates">
            TCustomBufDataset.ApplyUpdates
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.RevertRecord">
        <short>
          Reverts the current record to its original (un-edited) values
        </short>
        <descr>
          <p>
            <var>RevertRecord</var> is a procedure used to revert changes in the current record to their original (un-edited) values. RevertRecord calls the CheckBrowseMode method to ensure that the dataset is Active, and to perform event notifications for a change in dataset state.
          </p>
          <p>
            RevertRecord checks for an update buffer in the current record, and when found calls the CancelRecordUpdateBuffer method and removes the update buffer. The  Resync method is called to refresh the records in the dataset.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.CheckBrowseMode">
            TDataset.CheckBrowseMode
          </link>
          <link id="#fcl.Db.TDataset.Active">
            TDataset.Active
          </link>
          <link id="TCustomBufDataset.CancelRecordUpdateBuffer">
            TCustomBufDataset.CancelRecordUpdateBuffer
          </link>
          <link id="TCustomBufDataset.Resync">
            TCustomBufDataset.Resync
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.CancelUpdates">
        <short>
          Cancels pending updates in the dataset
        </short>
        <descr>
          <p>
            <var>CancelUpdates</var> is a procedure used to cancel pending updates to records in the dataset. CancelUpdates calls the CheckBrowseMode method to ensure that the dataset is Active, and to perform event notifications for a change in dataset state.
          </p>
          <p>
            CancelUpdates checks for existing update buffers allocated in the dataset. When update buffers exist, the CancelRecordUpdateBuffer method is called for the bookmark in each of the update buffers.
          </p>
          <p>
            CancelUpdates restores the record position when able, and calls Resync to refresh the records available in the dataset.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.CheckBrowseMode">
            TDataset.CheckBrowseMode
          </link>
          <link id="#fcl.Db.TDataset.Active">
            TDataset.Active
          </link>
          <link id="TCustomBufDataset.CancelRecordUpdateBuffer">
            TCustomBufDataset.CancelRecordUpdateBuffer
          </link>
          <link id="TCustomBufDataset.Resync">
            TCustomBufDataset.Resync
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.Destroy" link="#fcl.Db.TDataset.Destroy">
        <short>
          Destructor for the class instance
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy calls the Close method if the dataset contains <var>True</var> in the Active property.
          </p>
          <p>
            Destroy frees resources allocated to the internal buffers for records, and Blob fields. The ClearIndexes method is called to free resources allocated for index storage mechanisms. Destroy calls the inherited destructor.
          </p>
        </descr>
      </element>

      <element name="TCustomBufDataset.Locate" link="#fcl.Db.TDataset.Locate">
        <short>
          Locates the first record with fields having the specified values
        </short>
        <descr>
          <p>
            <var>Locate</var> is an overridden <var>Boolean</var> function used to locate the first record with fields that match the specified search values. Locate implements the method defined in the ancestor class.
          </p>
          <p>
            KeyFields is a delimited list of field names searched in the method. The delimiter character is '<b>;</b>' (<b>Semicolon</b>).
          </p>
          <p>
            KeyValues is a Variant type with the field values required for the specified  KeyFields. When KeyFields contains a single field name, KeyValues can be represented using the same data type as the field value. When KeyFields contains more than one field name, it is a Variant array.
          </p>
          <p>
            Options is a TLocateOptions parameter that indicates the locate options enabled in the method. Options can contain zero (<b>0</b>) or more values from the TLocateOption enumeration.
          </p>
          <p>
            Locate calls the inherited method to ensure that the dataset supports bi-directional navigation. An Exception is raised if the UniDirectional property contains <var>True</var>. The value in the Active property is checked to ensure that the dataset has been opened. An Exception is raised if Active contains <var>False</var>. No actions are performed in the method when IsEmpty returns <var>True</var>.
          </p>
          <p>
            Locate initializes an internal TDBCompareStruct instance that is used when searching field values using the SearchFields and Options arguments. The search is performed by using the Filter feature; the filter fields are set to the values in KeyValues. Each record in the dataset is visited and the OnFilterRecord event is signalled to determine if the record meets the Filter criteria. The search ends when a record is found that matches the search values.
          </p>
          <p>
            The record position is changed to the marching record, or positioned at the end-of-file when no matching record is found.
          </p>
          <p>
            The return value is <var>True</var> if a record was located that matched the search values.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Locate">
            TDataset.Locate
          </link>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
          <link id="TCustomBufDataset.Active">
            TCustomBufDataset.Active
          </link>
          <link id="TCustomBufDataset.Filter">
            TCustomBufDataset.Filter
          </link>
          <link id="TCustomBufDataset.OnFilterRecord">
            TCustomBufDataset.OnFilterRecord
          </link>
          <link id="#fcl.Db.TLocateOptions">
            TLocateOptions
          </link>
          <link id="TDBCompareStruct">
            TDBCompareStruct
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.Locate.Result">
        <short>True if a record was found that matches the search condition</short>
      </element>
      <element name="TCustomBufDataset.Locate.KeyFields">
        <short>List of key fields examine in the method</short>
      </element>
      <element name="TCustomBufDataset.Locate.KeyValues">
        <short>Field values to match in the method</short>
      </element>
      <element name="TCustomBufDataset.Locate.Options">
        <short>Locate options enabled in the method</short>
      </element>

      <element name="TCustomBufDataset.Lookup" link="#fcl.Db.TDataset.Lookup">
        <short>
          Gets values from the first record with fields that match the search condition
        </short>
        <descr>
          <p>
            <var>Lookup</var> is an overridden <var>Variant</var> function used to get values from the first record with fields that match the specified search values. Lookup re-implements the method defined in the ancestor class. Lookup allows searching one or more fields for corresponding values, and returning a set of field values from the matching record.
          </p>
          <p>
            KeyFields is a delimited list of field names searched in the method. The delimiter character is '<b>;</b>' (<b>Semicolon</b>). The following example would represent the fields <b>LASTNAME</b> and <b>FIRSTNAME</b>:
          </p>
          <code>
'LASTNAME; FIRSTNAME'
          </code>
          <p>
            KeyValues is a Variant type with the field values required for the specified  KeyFields. When KeyFields contains a single field name, KeyValues can be represented using the same data type as the field value. When KeyFields contains more than one field name, it is a Variant array. Using the previous values for KeyFields, the following would represent  the values for '<b>JOHN SMITH</b>':
          </p>
          <code>
VarArrayOf([ 'SMITH', 'JOHN' ])
          </code>
          <p>
            ResultFields contains one or more field names which determine the field values to include in the return value for the method. Like KeyFields, it is a delimited list of field names using '<b>;</b>' (<b>Semicolon</b>) as the delimiter character.
          </p>
          <p>
            The return value is a Variant type that contains a value for each of the field names specified in the ResultFields argument. When a matching record is located, the return value  is a Variant array. The return value is <var>Null</var> if a record is not found matching the specified KeyValues in its KeyFields.
          </p>
          <code>
var
  AVarValues: Variant;
  ABufDataset: TBufDataset;

// ...

AVarValues := ABufDataset.Lookup('lastname;firstname',
  VarArrayOf(['SMITH', 'JOHN']), 'lastname;firstname;birthdate;emailaddress');

if not VarIsNull(AVarValues) then
  DoSomethingWith(AVarValues)
else
  WriteLn('No records match the search criteria');
          </code>
          <p>
            Lookup does not change the record position in the dataset. A temporary TBookmark is used to record the current record in the dataset. The record position is restored prior to exiting from the method.
          </p>
          <p>
            Lookup calls the Locate method to search records in the dataset using the KeyFields and KeyValues arguments. The Locate method may raise an Exception if the dataset is configured for UniDirectional access or when it is not Active.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.Locate">
            TCustomBufDataset.Locate
          </link>
          <link id="TCustomBufDataset.Active">
            TCustomBufDataset.Active
          </link>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.Lookup.Result">
        <short>Variant array with values for the result fields</short>
      </element>
      <element name="TCustomBufDataset.Lookup.KeyFields">
        <short>List of fields used to find matching values in the lookup</short>
      </element>
      <element name="TCustomBufDataset.Lookup.KeyValues">
        <short>Variant array with field values to match in the method</short>
      </element>
      <element name="TCustomBufDataset.Lookup.ResultFields">
        <short>List of fields to include in the result for the method</short>
      </element>

      <element name="TCustomBufDataset.UpdateStatus"
        link="#fcl.Db.TDataset.UpdateStatus">
        <short>
          Gets the update status for the current record in the dataset
        </short>
        <descr>
          <p>
            <var>UpdateStatus</var> is an overridden <var>TUpdateStatus</var> function used to get the update status for the current record in the dataset. UpdateStatus re-implements the method defined in the ancestor class. The return value is a member of the TUpdateStatus enumeration, and includes the following values:
          </p>
          <dl>
            <dt>usUnmodified</dt>
            <dd>Record has not been modified</dd>
            <dt>usModified</dt>
            <dd>Record has been modified</dd>
            <dt>usInserted</dt>
            <dd>Records was appended or inserted</dd>
            <dt>usDeleted</dt>
            <dd>Record has been deleted</dd>
          </dl>
          <p>
            UpdateStatus calls GetActiveRecordUpdateBuffer to get the update buffer for the ActiveRecord. When an update buffer exists for the record, its UpdateKind property is used as the return value for the method. The return value is <var>usUnmodified</var> when an update buffer does not exist for ActiveRecord.
          </p>
        </descr>
        <seealso>
          <link id="TUpdateStatus">
            TUpdateStatus
          </link>
          <link id="TCustomBufDataset.ActiveRecord">
            TCustomBufDataset.ActiveRecord
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.UpdateStatus.Result">
        <short>Update status value for the record</short>
      </element>

      <element name="TCustomBufDataset.CreateBlobStream"
        link="#fcl.Db.TDataset.CreateBlobStream">
        <short>
          Creates a Blob stream for the specified field with the given permissions
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.CreateBlobStream">TDataset.CreateBlobStream</link>
          <link id="#fcl.Db.TField">TField</link>
          <link id="#fcl.Db.TBlobStreamMode">TBlobStreamMode</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.CreateBlobStream.Result">
        <short>Stream created for the Blob field</short>
      </element>
      <element name="TCustomBufDataset.CreateBlobStream.Field">
        <short>Field for the Blob stream</short>
      </element>
      <element name="TCustomBufDataset.CreateBlobStream.Mode">
        <short>Operations allowed on the stream</short>
      </element>

      <element name="TCustomBufDataset.AddIndex">
        <short>
          Adds an index definition to the dataset
        </short>
        <descr>
          <p>
            <var>AddIndex</var> is a procedure used to add an index definition to the dataset. AddIndex calls CheckBiDirectional to ensure that the UniDirectional property contains <var>False</var>. An exception is raised if UniDirectional contains <var>True</var>.
          </p>
          <p>
            AddIndex checks for a valid value in the AFields argument. An Exception is raised when AFields is an empty string (<b>''</b>). In addition, an index added to an Active dataset cannot cause the index count to exceed the value in MaxIndexesCount. An Exception is raised if the index count would be larger than the value in MaxIndexesCount.
          </p>
          <p>
            AddIndex creates a TBufDatasetIndex instance by calling InternalAddIndex using the arguments passed to the method. The new index is temporary when the Active property contains <var>True</var>; it will be discarded when the dataset is closed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
          <link id="TCustomBufDataset.InternalAddIndex">
            TCustomBufDataset.InternalAddIndex
          </link>
          <link id="TBufDatasetIndex">TBufDatasetIndex</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.AddIndex.AName">
        <short>Name which identifies the index</short>
      </element>
      <element name="TCustomBufDataset.AddIndex.AFields">
        <short>Fields included in the index</short>
      </element>
      <element name="TCustomBufDataset.AddIndex.AOptions">
        <short>Options enabled for the index</short>
      </element>
      <element name="TCustomBufDataset.AddIndex.ADescFields">
        <short>List of descending fields</short>
      </element>
      <element name="TCustomBufDataset.AddIndex.ACaseInsFields">
        <short>List of case-insensitive fields</short>
      </element>

      <element name="TCustomBufDataset.ClearIndexes">
        <short>
          Clears index storage in the dataset
        </short>
        <descr>
          <p>
            <var>ClearIndexes</var> is a procedure procedure used to clear the storage for all indexes in the dataset. ClearIndexes uses the index definitions in the BufIndexDefs property and calls the ClearIndex method for each of the indexes.
          </p>
          <p>
            ClearIndexes calls CheckInactive to ensure that the dataset has its Active property set to <var>False</var>. Indexes cannot be cleared if the dataset has been opened.
          </p>
          <p>
            ClearIndexes is used when the value in the UniDirectional property is changed to <var>False</var>, and in the destructor for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">
            TCustomBufDataset.BufIndexDefs
          </link>
          <link id="TCustomBufDataset.CheckInactive">
            TCustomBufDataset.CheckInactive
          </link>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.GetDatasetPacket">
        <short>
          Builds a data packet representing the content in the buffered dataset
        </short>
        <descr>
          <p>
            <var>GetDatasetPacket</var> is a procedure used to build the data packet that represents the content in the buffered dataset. GetDatasetPacket ensures that record buffers and update buffers in the dataset are normalized and applied using the data packet handler (n.b. I won't call it a reader if it writes) in AWriter.
          </p>
          <p>
            GetDatasetPacket sequentially processes records using the currently selected index for the dataset. Update buffers for a given record are consolidate in the record buffer, and the record buffer to stored to the data packet handler. The current record position is not changed when the process has been completed.
          </p>
          <p>
            GetDatasetPacket stores the current value for an auto-increment field used in the dataset in the AWriter argument. The internal data packet handler for the dataset is set to <var>Nil</var> when the method is completed.
          </p>
          <p>
            GetDatasetPacket is used in the implementation of the SaveToStream method.
          </p>
        </descr>
        <seealso>
          <link id="TDataPacketReader">TDataPacketReader</link>
          <link id="TCustomBufDataset.SaveToStream">TCustomBufDataset.SaveToStream</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.GetDatasetPacket.AWriter">
        <short>Data packet handler for the operation</short>
      </element>

      <element name="TCustomBufDataset.SetDatasetPacket">
        <short>
          Retrieves and applies the data packet with the content for the dataset
        </short>
        <descr>
          <p>
            SetDatasetPacket is a procedure used to retrieve and apply the data packet with the content for the dataset.
          </p>
          <p>
            AReader is a TDataPacketReader instance that is used to read and apply the content for the buffered dataset. It is temporarily assigned to an internal member in the calls instance.
          </p>
          <p>
            SetDatasetPacket calls the Open method to load the field definitions and record data for the dataset.
          </p>
          <p>
            SetDatasetPacket is used in the implementation of the LoadFromStream method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Open">
            TDataset.Open
          </link>
          <link id="TCustomBufDataset.LoadFromStream">
            TCustomBufDataset.LoadFromStream
          </link>
          <link id="TDataPacketReader">
            TDataPacketReader
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.SetDatasetPacket.AReader">
        <short>Data packet reader for the operation</short>
      </element>

      <element name="TCustomBufDataset.LoadFromStream" link="#fcl.Db.TDataset.LoadFromStream">
        <short>
          Loads the dataset from the specified stream using the given data format
        </short>
        <descr>
          <p>
            <var>LoadFromStream</var> is a procedure used to load field definitions and record data for the dataset from the specified stream. LoadFromStream is an overloaded variant of the method defined in the ancestor class and includes a parameter for the desired data packet format.
          </p>
          <p>
            AStream is a TStream descendant with the values to load in the dataset. Format indicates the expected format for data packets in the stream. It is a variable argument that can be modified when a packet reader is located for the stream.
          </p>
          <p>
            LoadFromStream calls CheckBiDirectional to ensure that the UniDirectional property in the dataset is set to <var>False</var>. An exception is raised when UniDirectional contains <var>True</var>. Index creation requires navigating in a non-default record order that would not be supported in a uni-directional dataset.
          </p>
          <p>
            LoadFromStream creates a temporary TDataPacketReader class instance using the  value specified in the Format argument. Format is a variable argument and can be modified when SetDatasetPacket is used to examine the packet reader and its stream. Calling SetDatasetPacket sets in motion a relatively complicated  sequence of events that eventually get the field definitions and record data loaded into the dataset. The journey starts with Open.
          </p>
          <p>
            LoadFromStream is used in the implementation of the LoadFromFile method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
          <link id="TCustomBufDataset.SetDatasetPacket">
            TCustomBufDataset.SetDatasetPacket
          </link>
          <link id="TCustomBufDataset.LoadFromFile">
            TCustomBufDataset.LoadFromFile
          </link>
          <link id="#fcl.Db.TDataset.Open">
            TDataset.Open
          </link>
          <link id="TDataPacketFormat">
            TDataPacketFormat
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.LoadFromStream.AStream">
        <short>Stream with values loaded into the dataset</short>
      </element>
      <element name="TCustomBufDataset.LoadFromStream.Format">
        <short>Format expected in the stream</short>
      </element>

      <element name="TCustomBufDataset.SaveToStream"  link="#fcl.Db.TDataset.SaveToStream">
        <short>
          Saves the dataset to the specified stream using the given data format
        </short>
        <descr>
          <p>
            SaveToStream is a procedure used to store the content in the buffered dataset to a stream using the specified data format.
          </p>
          <p>
            AStream is a TStream decendant where the field definitions and record data in the dataset will be stored.
          </p>
          <p>
            Format is a TDataPacketFormat enumeration value that indicates the format used to stored dataset values into the stream. The default value is dfBinary, and causes the TFpcBinaryDatapacketReader to be used to write the content for the dataset. Use another value from the TDataPacketFormat enumeration to select a different registered data packet handler that handles the associated data format.
          </p>
          <p>
            SaveToStream calls the CheckBiDirectional method to ensure that the dataset is opened for bi-directional record navigation. An Exception is raised if the UniDirectional property contains True. A temporary TDataPacketReader instance is created using the specified Format. SaveToStream calls the GetDatasetPacket method using the data packet handler to store the content in the buffered dataset to the stream.
          </p>
          <p>
            SaveToStream is used in the implementation of the SaveToFile method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
          <link id="TCustomBufDataset.SaveToFile">
            TCustomBufDataset.SaveToFile
          </link>
          <link id="TDataPacketFormat">
            TDataPacketFormat
          </link>
          <link id="RegisterDatapacketReader">
            RegisterDatapacketReader
          </link>
          <link id="TDataPacketReaderClass">
            TDataPacketReaderClass
          </link>
          <link id="TDataPacketReader">
            TDataPacketReader
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.SaveToStream.AStream">
        <short>Stream used to save values</short>
      </element>
      <element name="TCustomBufDataset.SaveToStream.Format">
        <short>Format used for values saved to the stream</short>
      </element>

      <element name="TCustomBufDataset.LoadFromFile">
        <short>
          Loads the dataset from the specified file using the given format
        </short>
        <descr>
          <p>
            <var>LoadFromFile</var> is a procedure used to load field definitions and record data from a file stored using a given data format.
          </p>
          <p>
            AFileName is a String with the name of the file on the local file system. AFileName can contain optional path information, and should include the base  name and extension for the file. For example:
          </p>
          <code>
ABufDataset.LoadFromFile('/usr/data/sample.bds');
          </code>
          <p>
            or
          </p>
          <code>
ABufDataset.LoadFromFile('c:\usr\data\sample.bds');
          </code>
          <p>
            The default value for AFileName is an empty string (<b>''</b>). When AFileName is an empty string, the value in the FileName property is used to load the content for the dataset. An Exception will be raised if both AFileName and FileName contain an empty String (<b>''</b>), or when the file name does not exist on the local file system.
          </p>
          <p>
            Format is a TDataPacketFormat enumeration value that indicates the storage format used for the content in the file. The default value for Format is dfAny, and indicates that any registered data packet handler can be used to read the values in the file. Other values in the TDataPacketFormat enumeration indicate a specific registered data packet handler supporting a specific format should be used.
          </p>
          <p>
            LoadFromFile creates a temporary TFileStream instance for the specified file name, and calls the LoadFromStream method to load the dataset from the stream using the specified file Format.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FIleName">
            TCustomBufDataset.FIleName
          </link>
          <link id="TCustomBufDataset.LoadFromStream">
            TCustomBufDataset.LoadFromStream
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.LoadFromFile.AFileName">
        <short>File name with values loaded in the method</short>
      </element>
      <element name="TCustomBufDataset.LoadFromFile.Format">
        <short>Format for values loaded in the method</short>
      </element>

      <element name="TCustomBufDataset.SaveToFile">
        <short>
          Saves the dataset to the specified file using the given data format
        </short>
        <descr>
          <p>
            <var>SaveToFile</var> is a procedure used to save the content from the buffered dataset to the specified file name using a given data format.
          </p>
          <p>
            AFileName is a String with the name of the file on the local file system. AFileName can contain optional path information, and should include the base  name and extension for the file. For example:
          </p>
          <code>
ABufDataset.SaveToFile('/usr/data/sample.bds');
          </code>
          <p>
            or
          </p>
          <code>
ABufDataset.SaveToFile('c:\usr\data\sample.bds');
          </code>
          <p>
            The default value for AFileName is an empty string (<b>''</b>). When AFileName is omitted, the value in the FileName property will be used to save the content for the dataset. An Exception will be raised if both AFileName and FileName contain an empty String (<b>''</b>).
          </p>
          <p>
            Format is a TDataPacketFormat enumeration value that indicates the storage format to use when writing the content for the file. The default value for Format is dfBinary, and indicates that the TFpcBinaryDatapacketReader should be used to write the values in the file. Other values in the TDataPacketFormat enumeration indicate a specific registered data packet handler supporting a specific format should be used.
          </p>
          <p>
            SaveToFile creates a temporary TFileStream instance for the specified file name, and calls the SaveToStream method to store the dataset to the stream in the required Format.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.FIleName">
            TCustomBufDataset.FIleName
          </link>
          <link id="TCustomBufDataset.SaveToStream">
            TCustomBufDataset.SaveToStream
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.SaveToFile.AFileName">
        <short>File name where the dataset is stored`</short>
      </element>
      <element name="TCustomBufDataset.SaveToFile.Format">
        <short>Format for values written in the method</short>
      </element>

      <element name="TCustomBufDataset.CreateDataset">
        <short>
          Creates the dataset using its field definitions or bound fields
        </short>
        <descr>
          <p>
            <var>CreateDataset</var> is a procedure used to create the structure for a buffered dataset using the field definitions or bound fields defined in the class instance. CreateDataset calls CheckInactive to ensure that the dataset has not been opened. An exception is raised if the Active property contains <var>True</var>.
          </p>
          <p>
            CreateDataset uses the FieldDefs and Fields properties to determine which property contains the structure for the dataset.
          </p>
          <p>
            Preference is given to the FieldDefs property; it will be used even when bound fields have been created in the Fields property. The CreateFields method is called to created a bound field for each of the items in the FieldDefs collection.
          </p>
          <p>
            The Fields property is used when there are no field definitions present in the FieldDefs property. The InitFieldDefsFromFields method is called to create a field definition in FieldDefs for each of the items in Fields collection. The BindFields method is called to link the items in Fields to the corresponding field definition in FieldDefs.
          </p>
          <p>
            An exception is raised if both FieldDefs and Fields are empty.
          </p>
          <p>
            CreateDataset sets the default value for an auto-increment field in the dataset to <var>1</var>. CreateDataset also temporarily clears any value assigned to the FileName property; this is done to ensure that fields and record data in an existing file are not loaded when the dataset is Opened. The method is designed to create a dataset with field definitions but no record data. The value in FileName is restored after Open has been called in the method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
          <link id="#fcl.Db.TDataset.FieldDefs">TDataset.FieldDefs</link>
          <link id="#fcl.Db.TDataset.Fields">TDataset.Fields</link>
          <link id="#fcl.Db.TDataset.CreateFields">TDataset.CreateFields</link>
          <link id="#fcl.Db.TDataset.InitFieldDefsFromFields">
            TDataset.InitFieldDefsFromFields
          </link>
          <link id="#fcl.Db.TDataset.BindFields">TDataset.BindFields</link>
          <link id="#fcl.Db.TDataset.Open">TDataset.Open</link>
          <link id="TCustomBufDataset.FileName">TCustomBufDataset.FileName</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.Clear">
        <short>
          Clears the content in the dataset
        </short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove the content in the buffered dataset. Clear calls the Close method to ensure that the dataset has set its Active property to <var>False</var> and removed indexes and their storage. Clear removes field definition and bound fields in the FieldDefs and Fields properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.Close">TCustomBufDataset.Close</link>
          <link id="#fcl.Db.TDataset.FieldDefs">TDataset.FieldDefs</link>
          <link id="#fcl.Db.TDataset.Fields">TDataset.Fields</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.BookmarkValid">
        <short>
          Determines if the specified Bookmark is valid for the dataset
        </short>
        <descr>
          <p>
            <var>BookmarkValid</var> is an overridden <var>Boolean</var> function used to determine if the Bookmark specified in ABookmark is valid for the currently selected index in the dataset. BookmarkValid re-implements the method defined in the ancestor class.
          </p>
          <p>
            BookmarkValid requires an index be selected and assigned to the CurrentIndexBuf property. The return value is <var>False</var> when no index is available to validate the bookmark. The return value is <var>True</var> when ABookmark represents a valid bookmark in the selected index.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.CurrentIndexBuf">
            TCustomBufDataset.CurrentIndexBuf
          </link>
          <link id="TBufIndex.BookmarkValid">
            TBufIndex.BookmarkValid
          </link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.BookmarkValid.Result">
        <short>True when the bookmark is valid</short>
      </element>
      <element name="TCustomBufDataset.BookmarkValid.ABookmark">
        <short>Bookmark examined in the method</short>
      </element>

      <element name="TCustomBufDataset.CompareBookmarks">
        <short>
          Gets the relative sort order for the specified Bookmarks
        </short>
        <descr>
          <p>
            CompareBookmarks is an overridden LongInt function used to get the relative sort order for the specified Bookmarks. CompareBookmarks re-implements the method defined in the ancestor class.
          </p>
          <p>
            The return value indicates the relative sort order for the compared bookmark values, and uses the following values and meanings:
          </p>
          <dl>
            <dt>0</dt>
            <dd>
              Compared bookmarks have the same value
            </dd>
            <dt>1</dt>
            <dd>
              Bookmark1 is not assigned, or Bookmark1 occurs after Bookmark2 in the index
            </dd>
            <dt>-1</dt>
            <dd>
              Bookmark2 is not assigned, or the current index has not been assigned (default value), or Bookmark1 occurs before Bookmark2 in the index
            </dd>
          </dl>
          <p>
            When the CurentIndexBuf property is assigned, its CompareBookmarks method is used to compare the bookmarks and get the return value for the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.CurrentIndexBuf">
            TCustomBufDataset.CurrentIndexBuf
          </link>
          <link id="TBufIndex">TBufIndex</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.CompareBookmarks.Result">
        <short>Relative sort order for the specified bookmarks</short>
      </element>
      <element name="TCustomBufDataset.CompareBookmarks.Bookmark1">
        <short>Bookmark used in the comparison</short>
      </element>
      <element name="TCustomBufDataset.CompareBookmarks.Bookmark2">
        <short>Bookmark used in the comparison</short>
      </element>

      <element name="TCustomBufDataset.CopyFromDataset">
        <short>
          Loads field definitions and optional data from another dataset
        </short>
        <descr>
          <p>
            <var>CopyFromDataset</var> is a procedure used to copy field definitions and optional record data for the dataset specified in the Dataset argument. CopyData indicates if record data is included in the copy operation. When CopyData contains <var>False</var>, only the field definitions in DataSet are copied to the buffered dataset.
          </p>
          <p>
            CopyFromDataset calls the Close method prior to performing actions that clear field definitions and bound fields in the buffered dataset. A field definition is added to FieldDefs for each of the fields in DataSet. CreateDataset is  called to bind Fields to the new field definitions, and to initialize index storage for the buffered dataset.
          </p>
          <p>
            When CopyData contains <var>True</var>, record data from DataSet is copied to the class instance on a row-by-row and field-by-field basis. Append is called to add a new record. Internal lists with field definitions and bound fields are used to copy field values in the record (including Blob fields). Null field values are not copied in the method. The DataType for the field is used to read/write the field values. For blob fields, a temporary stream is used to read/write the field value. The Post method is called to store appended values in the buffered dataset. If an exception is raised, the Cancel method is called to clear the update and the exception is re-raised.
          </p>
          <p>
            The record position in DataSet is restored to its original position prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Close">TDataset.Close</link>
          <link id="#fcl.Db.TDataset.Cancel">TDataset.Cancel</link>
          <link id="#fcl.Db.TDataset.FieldDefs">TDataset.FieldDefs</link>
        </seealso>
      </element>
      <element name="TCustomBufDataset.CopyFromDataset.Dataset">
        <short>Dataset with values copied in the method</short>
      </element>
      <element name="TCustomBufDataset.CopyFromDataset.CopyData">
        <short>True when record data is included in the copy operation</short>
      </element>

      <element name="TCustomBufDataset.ChangeCount">
        <short>
          Number of pending changes for the dataset
        </short>
        <descr>
          <p>
            <var>ChangeCount</var> is a read-only <var>Integer</var> property that indicates the number of pending changes in the update buffers allocated for the dataset. Update buffers are maintained in an internal TRecordsUpdateBuffer member when methods that add, delete, or modify record data are called.
          </p>
          <p>
            ChangeCount can be used in an application to determine if ApplyUpdates, CancelUpdates, or RevertRecord should be called prior to closing the dataset.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.ApplyUpdates">TCustomBufDataset.ApplyUpdates</link>
          <link id="TCustomBufDataset.CancelUpdates">TCustomBufDataset.CancelUpdates</link>
          <link id="TCustomBufDataset.RevertRecord">TCustomBufDataset.RevertRecord</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.MaxIndexesCount">
        <short>
          Maximum number of indexes available in the dataset
        </short>
        <descr>
          <p>
            <var>MaxIndexesCount</var> is an <var>Integer</var> property which indicates the maximum number of indexes available in the buffered dataset. The default value for the property is <var>2</var>; representing the automatically created default index (<var>'DEFAULT_ORDER'</var>) and custom index (<var>'CUSTOM_ORDER'</var>).
          </p>
          <p>
            The value in MaxIndexesCount is assigned when the dataset is created, and updated when an index is added using the AddIndex method. Setting the value in the MaxIndexesCount property requires the dataset to be inactive (Active property contains <var>False</var>). An exception is raised if the dataset is Active, or the new value for the property is less than <var>2</var>. You should not need to directly assign the value for the MaxIndexesCount property.
          </p>
          <p>
            MaxIndexesCount is used in the BufferOffset method to determine the amount of space reserved for TBufRecLinkItem items in a record buffer for the dataset.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
          <link id="TCustomBufDataset.AddIndex">TCustomBufDataset.AddIndex</link>
          <link id="TCustomBufDataset.BuffOffset">TCustomBufDataset.BuffOffset</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.ReadOnly" link="#fcl.Db.TDataset.ReadOnly">
        <short>
          Indicates if records can be added, deleted, or modified in the dataset
        </short>
        <descr>
          <p>
            <var>ReadOnly</var> is a <var>Boolean</var> property which indicates if records can be added, deleted, or modified in the buffered dataset. The default value for the property is <var>False</var>.
          </p>
          <p>
            ReadOnly is used, along with UniDirectional, when getting the value for the CanModify property. The dataset can be modified when both source properties contain the value <var>False</var>, which results in setting CanModify to <var>True</var>. Applications can set the value in ReadOnly to <var>False</var> to ensure that the dataset is not changeable regardless of the value in the UniDirectional property.
          </p>
          <p>
            Use the items in the FieldDefs property to control whether individual fields defined for the dataset include the read-only field attribute. Use the items in the Fields property to determine if a field bound to a field definition has its ReadOnly property set.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.UniDirectional">
            TCustomBufDataset.UniDirectional
          </link>
          <link id="#fcl.Db.TDataset.CanModify">
            TDataset.CanModify
          </link>
          <link id="#fcl.Db.TDataset.FieldDefs">
            TDataset.FieldDefs
          </link>
          <link id="#fcl.Db.TDataset.Fields">
            TDataset.Fields
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.ManualMergeChangeLog">
        <short>
          Indicates if the update change log can be manually merged
        </short>
        <descr>
          <p>
            <var>ManualMergeChangeLog</var> is a <var>Boolean</var> property which indicates if the update change log for the dataset can be manually merged. The default value for the property is <var>False</var>.
          </p>
        </descr>
      </element>

      <!-- visibility: published -->
      <element name="TCustomBufDataset.FileName">
        <short>
          File name on the local file system used to load or store the dataset
        </short>
        <descr>
          <p>
            <var>FileName</var> is a <var>TFileName</var> property that contains a file name on the local file system used to load and/or store the content for the buffered dataset. FileName can contain optional path information needed to access the file, and must contain a valid file name and extension for the local file system. For example:
          </p>
          <code>
ABufDataset.FileName := '/usr/data/sample.bds';
          </code>
          <p>
            or
          </p>
          <code>
ABufDataset.FileName := 'c:\usr\data\sample.bds';
          </code>
          <p>
            The value in FileName is used in methods which load and/or save field definitions and record data for the dataset, such as LoadFromFile and SaveToFile. In these methods, FileName is used as the default value for an omitted file name argument in the method(s). FileName is used in the implementation of other methods such as: InternalInitFieldDef, IntLoadFieldDefsFromFile, and InternalOpen.
          </p>
          <p>
            FileName is also used in the DoBeforeClose method called when the value in the Active property is changed from <var>True</var> to <var>False</var>. In this method, FileName is passed to SaveToFile as an argument prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.LoadFromFile">
            TCustomBufDataset.LoadFromFile
          </link>
          <link id="TCustomBufDataset.SaveToFile">
            TCustomBufDataset.SaveToFile
          </link>
          <link id="#fcl.Db.TDataset.Open">
            TDataset.Open
          </link>
          <link id="#fcl.Db.TDataset.Close">
            TDataset.Close
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.PacketRecords">
        <short>
          Number of records allowed in a data packet handled by the packet reader
        </short>
        <descr>
          <p>
            <var>PacketRecords</var> is an <var>Integer</var> property that indicates the number of records allowed in a data packet handled by the packet reader. The default value for the property is <var>10</var>, and is intended to minimize memory and network overhead when processing data packets for the dataset. The value in PacketRecords is used  in the FetchAll and GetNextPacket methods.
          </p>
          <p>
            Additional validation is performed when setting the value for PacketRecords to ensure that the new property value is not <var>-1</var>. An exception is raised when <var>-1</var> is the value for the property.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TCustomBufDataset.OnUpdateError">
        <short>
          Event handler signalled when an error occurs while updating records
        </short>
        <descr>
          <p>
            <var>OnUpdateError</var> is a <var>TResolverErrorEvent</var> property that represents the event handler signalled when an error occurs while applying updates to records in the buffered dataset. OnUpdateError allows an application to perform actions needed when a database exception occurs in the <var>ApplyUpdates</var> method.
          </p>
          <p>
            Applications can assign a procedure to the event handler that implements the TResolverErrorEvent signature to respond to the event notification. The procedure must set the value in its Response argument to indicate whether the condition is handled, ignored, or can be re-raised in the calling method.
          </p>
        </descr>
        <seealso>
          <link id="TResolverErrorEvent">TResolverErrorEvent</link>
          <link id="TCustomBufDataset.ApplyUpdates">TCustomBufDataset.ApplyUpdates</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.IndexDefs">
        <short>
          Index definitions for the dataset
        </short>
        <descr>
          <p>
            <var>IndexDefs</var> is a read-only <var>TIndexDefs</var> property that contains the index definitions for the buffered dataset. Read access to the property is redirected to an internal TBufDatasetIndexDefs member used for the BufIndexDefs and BufIndexes properties.
          </p>
        </descr>
        <seealso>
          <link id="#fcl.Db.TIndexDefs">TIndexDefs</link>
          <link id="TBufDatasetIndexDefs">TBufDatasetIndexDefs</link>
          <link id="TCustomBufDataset.BufIndexDefs">TCustomBufDataset.BufIndexDefs</link>
          <link id="TCustomBufDataset.BufIndexes">TCustomBufDataset.BufIndexes</link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.IndexName">
        <short>
          Name of the selected index for the dataset
        </short>
        <descr>
          <p>
            <var>IndexName</var> is a <var>String</var> property that contains the name for the selected index for the buffered dataset. The value in IndexName is read from the corresponding property in CurrentIndexBuf (when assigned).
          </p>
          <p>
            If an empty string (<b>''</b>) is assigned to the property, the the default index is selected for the dataset and the property is updated to <var>'DEFAULT_ORDER'</var>. Any other value assigned to the property is compared to the index definitions for the dataset. If an index cannot be located with the specified name, a Database exception is raised. The index with the specified name (and its storage mechanism) are stored in the CurrentIndexDef and CurrentIndexBuf properties. If the dataset is Active, the Resync method is called to enable the new record order for the dataset.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.CurrentIndexDef">
            TCustomBufDataset.CurrentIndexDef
          </link>
          <link id="TCustomBufDataset.CurrentIndexBuf">
            TCustomBufDataset.CurrentIndexBuf
          </link>
          <link id="#fcl.Db.TDataset.Active">
            TDataset.Active
          </link>
          <link id="#fcl.Db.TDataset.Resync">
            TDataset.Resync
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.IndexFieldNames">
        <short>
          Field names included in the custom index
        </short>
        <descr>
          <p>
            <var>IndexFieldNames</var> is a <var>String</var> property which contains a delimited list of field names used to construct the custom index for the dataset. Field names are separated by a <b>';'</b> (Semicolon) delimiter. An optional directive can be included after the field name to indicate that the field should be in descending sort order in the index. For example:
          </p>
          <code>
ABufDataset.IndexFieldNames := 'LASTNAME; FIRSTNAME; UPDATETS DESC';
          </code>
          <p>
            Please note that the leading Space character before the <b>DESC</b> directive is <b>required</b>.
          </p>
          <p>
            When reading the value in IndexFieldNames, the current index is examined to  determine if any of the field names in the property also appear in the descending fields for the index. The <var>' DESC'</var> directive is added to the field name to indicate the sort order used in the index.
          </p>
          <p>
            Setting the value for the property to an empty string (<b>''</b>) causes the default index (<var>'DEFAULT_ORDER'</var>) to be used as the selected index in the CurrentIndexDef property. When the new property value is not an empty string, and the dataset is Active, the BuildCustomIndex method is called to populate index storage with values for the specified field names.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.CurrentIndexDef">
            TCustomBufDataset.CurrentIndexDef
          </link>
          <link id="TDataset.Active">
            TDataset.Active
          </link>
          <link id="TCustomBufDataset.BuildCustomIndex">
            TCustomBufDataset.BuildCustomIndex
          </link>
        </seealso>
      </element>

      <element name="TCustomBufDataset.UniDirectional" link="#fcl.Db.TDataset.UniDirectional">
        <short>
          Indicates if the dataset is for uni-directional navigation only
        </short>
        <descr>
          <p>
            <var>UniDirectional</var> is a <var>Boolean</var> property which indicates if the dataset is limited to forward navigation through its records. The default value for the property is <var>False</var>.
          </p>
          <p>
            UniDirectional is used, along with ReadOnly, to determine if the dataset can be modified. When either property contains <var>True</var>, the dataset cannot be changed.
          </p>
          <p>
            UniDirectional also affects the index storage metchanisms created when indexes are initialized. When UniDIrectional is <var>True</var>, the TUniDirectionalBufIndex type (which omits bookmarks and record numbers) is used for index storage mechanisms. In addition, the custom index (<var>'CUSTOM_ORDER'</var>) is skipped for the uni-directional dataset.
          </p>
          <p>
            Setting the value in UniDirectional requires the dataset to be inactive (Active contains <var>False</var>) to allow existing indexes to be cleared and rebuilt. Use the Close method to cl;osr the dataset prior to setting the value in the UniDIrectional property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset.BufIndexDefs">TCustomBufDataset.BufIndexDefs</link>
          <link id="TCustomBufDataset.BufIndexes">TCustomBufDataset.BufIndexes</link>
          <link id="#fcl.Db.TDataset.ReadOnly">TDataset.ReadOnly</link>
          <link id="#fcl.Db.TDataset.Active">TDataset.Active</link>
        </seealso>
      </element>

      <element name="TBufDataset" link="TCustomBufDataset">
        <short>
          Implements a database-aware buffered dataset
        </short>
        <descr>
          <p>
            <var>TBufDataset</var> is a <var>TCustomBufDataset</var> descendant that implements a database-aware buffered dataset. TBufDataset is an in-memory dataset that can be used as a local stand-alone dataset, or it can be used as a local buffer for updates applied to a remote dataset. TBufDataset implements many features similar to those in TClientDataset in Delphi. However, it is <b>not</b> meant to be code or function compatible with TClientDataset. It is designed to provide management of the buffers used to access record data, and is used as the ancestor for classes like TSQLQuery and TRESTBufDataset.
          </p>
          <p>
            As a TDBDataset descendent, it offers access to many of the database features supported in the FCL DB package. As a TDataset descendent, it also offers access to familiar navigation and data handling methods in the ancestor class. TBufDataset has features that allow local storage and retrieval  of field definitions and record data. In addition, facilities are provided that allow local indexing of record data in the dataset. There is a comprehensive parser/expression evaluator available that allows complete support for Filters in the dataset.
          </p>
          <p>
            TBufDataset sets the visibility for properties and methods defined in the ancestor class.
          </p>
          <p>
            Additional information about using TBufDataset can be found on the Lazarus Wiki at: <url href="http://wiki.freepascal.org/How_to_write_in-memory_database_applications_in_Lazarus/FPC">
              How to write in-memory database applications in Lazarus/FPC (TBufDataset)</url>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomBufDataset">TCustomBufDataset</link>
          <link id="#fcl.Db.TDataset">TDataset</link>
          <link id="#fcl.Db.TDBDataset">TDBDataset</link>
        </seealso>
      </element>

      <element name="TBufDataset.MaxIndexesCount" link="TCustomBufDataset.MaxIndexesCount"/>
      <element name="TBufDataset.FieldDefs" link="#fcl.Db.TDataset.FieldDefs"/>
      <element name="TBufDataset.Active" link="#fcl.Db.TDataset.Active"/>
      <element name="TBufDataset.AutoCalcFields" link="#fcl.Db.TDataset.AutoCalcFields"/>
      <element name="TBufDataset.Filter" link="#fcl.Db.TDataset.Filter"/>
      <element name="TBufDataset.Filtered" link="#fcl.Db.TDataset.Filtered"/>
      <element name="TBufDataset.ReadOnly" link="#fcl.Db.TDataset.ReadOnly"/>
      <element name="TBufDataset.AfterCancel" link="#fcl.Db.TDataset.AfterCancel"/>
      <element name="TBufDataset.AfterClose" link="#fcl.Db.TDataset.AfterClose"/>
      <element name="TBufDataset.AfterDelete" link="#fcl.Db.TDataset.AfterDelete"/>
      <element name="TBufDataset.AfterEdit" link="#fcl.Db.TDataset.AfterEdit"/>
      <element name="TBufDataset.AfterInsert" link="#fcl.Db.TDataset.AfterInsert"/>
      <element name="TBufDataset.AfterOpen" link="#fcl.Db.TDataset.AfterOpen"/>
      <element name="TBufDataset.AfterPost" link="#fcl.Db.TDataset.AfterPost"/>
      <element name="TBufDataset.AfterScroll" link="#fcl.Db.TDataset.AfterScroll"/>
      <element name="TBufDataset.BeforeCancel" link="#fcl.Db.TDataset.BeforeCancel"/>
      <element name="TBufDataset.BeforeClose" link="#fcl.Db.TDataset.BeforeClose"/>
      <element name="TBufDataset.BeforeDelete" link="#fcl.Db.TDataset.BeforeDelete"/>
      <element name="TBufDataset.BeforeEdit" link="#fcl.Db.TDataset.BeforeEdit"/>
      <element name="TBufDataset.BeforeInsert" link="#fcl.Db.TDataset.BeforeInsert"/>
      <element name="TBufDataset.BeforeOpen" link="#fcl.Db.TDataset.BeforeOpen"/>
      <element name="TBufDataset.BeforePost" link="#fcl.Db.TDataset.BeforePost"/>
      <element name="TBufDataset.BeforeScroll" link="#fcl.Db.TDataset.BeforeScroll"/>
      <element name="TBufDataset.OnCalcFields" link="#fcl.Db.TDataset.OnCalcFields"/>
      <element name="TBufDataset.OnDeleteError" link="#fcl.Db.TDataset.OnDeleteError"/>
      <element name="TBufDataset.OnEditError" link="#fcl.Db.TDataset.OnEditError"/>
      <element name="TBufDataset.OnFilterRecord" link="#fcl.Db.TDataset.OnFilterRecord"/>
      <element name="TBufDataset.OnNewRecord" link="#fcl.Db.TDataset.OnNewRecord"/>
      <element name="TBufDataset.OnPostError" link="#fcl.Db.TDataset.OnPostError"/>

      <element name="RegisterDatapacketReader">
        <short>
          Registers a data packet reader using a specific format for TBufDataset
        </short>
        <descr>
          <p>
            <var>RegisterDatapacketReader</var> is a procedure which registers a class type needed to create data packet readers for a specific format. <var>ADatapacketReaderClass</var> is the class type used to create new instances of <var>TDataPacketReader</var>.  <var>AFormat</var> is a <var>TDataPacketFormat</var> enumeration value that indicates the format supported for data packets in the reader class.
          </p>
          <p>
            RegisterDatapacketReader accesses a unit variable used to store an array of registered data packet reader classes and their associated formats. RegisterDatapacketReader increments the size of the array variable,  and stores the values in ADatapacketReaderClass and AFormat in the TDatapacketReaderRegistration type. It does not perform any checks for duplicate entries, so the procedure should be called exactly once for the class type and format combination.
          </p>
          <p>
            RegisterDatapacketReader is normally used in the initialization section of a unit that implements a TDataPacketReader descendant for a specific storage format, such as: <var>xmldatapacketreader.pp</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDataPacketReader">
            TDataPacketReader
          </link>
          <link id="TDataPacketFormat">
            TDataPacketFormat
          </link>
          <link id="#lcl.xmldatapacketreader.TXMLDatapacketReader">
            TXMLDatapacketReader
          </link>
        </seealso>
      </element>
      <element name="RegisterDatapacketReader.ADatapacketReaderClass">
        <short>Class type used to read data packets in the specified format</short>
      </element>
      <element name="RegisterDatapacketReader.AFormat">
        <short>Data packet format used in the reader class type</short>
      </element>
    </module>
    <!-- bufdataset -->
  </package>
</fpdoc-descriptions>
